using System.Runtime.InteropServices;
using HarpoS7.Fingerprint;

namespace HarpoS7.Tests.Fingerprint;

public class HarpoFingerprintTests
{
    public static IEnumerable<TestCaseData> FingerprintSubProcedureCases
        {
            get
            {
                var challenge = new byte[20] { 184, 13, 177, 179, 217, 72, 76, 110, 66, 64, 64, 63, 99, 198, 181, 1, 44, 197, 46, 127 }.AsSpan();
                uint[] static4_0 = new uint[FingerprintConsts.BigContextLengthDword];
                FingerprintConsts.BigContextInitialValue.CopyTo(static4_0.AsSpan());

                var static2_0 = new byte[FingerprintConsts.SmallContextLength];
                challenge.Slice(2, 16).CopyTo(static2_0);

                var expected_0 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0xC2, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x00, 0xF0, 0x00,
                    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0x01, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x04, 0x09,
                    0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00,
                    0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_0, 0, expected_0, static4_0);

                var static2_1 = new byte[FingerprintConsts.SmallContextLength];
                expected_0.AsSpan().CopyTo(static2_1.AsSpan());
                var static4_1_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xF2, 0x41, 0x6B, 0xDA, 0x95, 0x86, 0x9E, 0x78, 0x00, 0x20, 0x64, 0x18,
                    0x13, 0xEF, 0xAB, 0xE0, 0x00, 0x9E, 0x69, 0x08, 0x95, 0xB2, 0x54, 0xC4,
                    0x6D, 0xA9, 0x9D, 0x06, 0xB6, 0xE3, 0x98, 0x48, 0x60, 0xD3, 0x7B, 0x15,
                    0x21, 0x2F, 0xA3, 0x67, 0x99, 0x16, 0x25, 0xDB, 0x45, 0x97, 0x8B, 0x88,
                    0xFA, 0x20, 0x00, 0x00, 0x73, 0xEB, 0xBD, 0xE7, 0x25, 0xAA, 0xFD, 0x06,
                    0x02, 0x79, 0x61, 0xC9, 0xE9, 0x5C, 0x75, 0xFC, 0xCE, 0xA1, 0xAD, 0xED,
                    0xCA, 0x6E, 0xD5, 0x66, 0xFA, 0x2C, 0xCA, 0x17, 0x2D, 0xCB, 0xBC, 0x0D,
                    0xFE, 0xF4, 0x2C, 0xB4, 0x5C, 0xF4, 0x1E, 0x21, 0x73, 0x4E, 0xB9, 0x7A,
                    0x5D, 0x81, 0x28, 0x9E, 0xF6, 0x0F, 0x18, 0x91, 0xF6, 0x7A, 0x59, 0x67,
                    0x0B, 0x28, 0xB2, 0xA0, 0x41, 0xBC, 0x61, 0xDF, 0xCB, 0x46, 0x78, 0x73,
                    0x9F, 0x47, 0x6A, 0x0D, 0x37, 0x35, 0xB2, 0xAB, 0x79, 0x99, 0x72, 0x20,
                    0x48, 0x55, 0x2C, 0x01, 0xCE, 0x75, 0x6A, 0xFF, 0x78, 0xFC, 0xC6, 0xBC,
                    0xE8, 0x0F, 0xB1, 0x20, 0x4D, 0xB8, 0xA7, 0x5A, 0x66, 0xFE, 0xE3, 0x28,
                    0x8A, 0x2A, 0x07, 0xD0, 0x44, 0x0F, 0x2C, 0xB5, 0x6E, 0x3F, 0x5C, 0x00,
                    0xB0, 0xF7, 0xD7, 0x61, 0xDC, 0x73, 0xC0, 0xB7, 0xDC, 0x59, 0x56, 0x36,
                    0xDA, 0x8C, 0x7C, 0xFE, 0x55, 0xE3, 0x44, 0x0D,
};
                var static4_1 = MemoryMarshal.Cast<byte, uint>(static4_1_b.AsSpan()).ToArray();
                var expected_1 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x90,
                    0x00, 0xE1, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00,
                    0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x70, 0x00, 0xC2, 0x00,
                    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x50, 0x00,
                    0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xA0, 0x00, 0x00,
                    0x00, 0xE0, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x00, 0xF0, 0x00,
                    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0x01, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0xB0,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x05, 0x09,
                    0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
                    0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x02, 0x0F, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x06, 0x80, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_1, 1, expected_1, static4_1);

                var static2_2 = new byte[FingerprintConsts.SmallContextLength];
                expected_1.AsSpan().CopyTo(static2_2.AsSpan());
                var static4_2_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xFE, 0x46, 0x4C, 0xBF, 0x1A, 0x08, 0x35, 0xCA, 0x00, 0x20, 0x64, 0x18,
                    0x13, 0xEF, 0xAB, 0xE0, 0x00, 0x9E, 0x69, 0x08, 0xD1, 0x82, 0xD3, 0x5C,
                    0x67, 0x9F, 0xAF, 0x25, 0xDE, 0xA5, 0xBB, 0x2B, 0xA0, 0xDC, 0xB8, 0x25,
                    0x21, 0x2F, 0xA3, 0x67, 0x99, 0x16, 0x25, 0xDB, 0x45, 0x97, 0x8B, 0x88,
                    0xFA, 0x20, 0x00, 0x00, 0x78, 0x7C, 0x5E, 0x8F, 0x25, 0xAA, 0xFD, 0x06,
                    0x02, 0x79, 0x61, 0xC9, 0xE9, 0x5C, 0x75, 0xFC, 0xCE, 0xA1, 0xAD, 0xED,
                    0xCA, 0x6E, 0xD5, 0x66, 0xFA, 0x2C, 0xCA, 0x17, 0x2D, 0xCB, 0xBC, 0x0D,
                    0xFE, 0xF4, 0x2C, 0xB4, 0x5C, 0xF4, 0x1E, 0x21, 0x73, 0x4E, 0xB9, 0x7A,
                    0x5D, 0x81, 0x28, 0x9E, 0xF6, 0x0F, 0x18, 0x91, 0xF6, 0x7A, 0x59, 0x67,
                    0x0B, 0x28, 0xB2, 0xA0, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0xA3, 0x6D, 0x83, 0x7C, 0x37, 0x35, 0xB2, 0xAB, 0x9A, 0x00, 0x1E, 0xC0,
                    0x48, 0x55, 0x2C, 0x01, 0xCE, 0x75, 0x6A, 0xFF, 0x78, 0xFC, 0xC6, 0xBC,
                    0xE8, 0x0F, 0xB1, 0x20, 0x85, 0x0B, 0x0D, 0x1F, 0x66, 0xFE, 0xE3, 0x28,
                    0x8A, 0x2A, 0x07, 0xD0, 0x03, 0x3A, 0x86, 0x39, 0x6E, 0x3F, 0x5C, 0x00,
                    0xB0, 0xF7, 0xD7, 0x61, 0xDC, 0x73, 0xC0, 0xB7, 0xDC, 0x59, 0x56, 0x36,
                    0xDA, 0x8C, 0x7C, 0xFE, 0x55, 0xE3, 0x44, 0x0D,
};
                var static4_2 = MemoryMarshal.Cast<byte, uint>(static4_2_b.AsSpan()).ToArray();
                var expected_2 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0x09, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x30,
                    0x00, 0xE1, 0x00, 0x00, 0x00, 0x80, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x0D, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x30, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00,
                    0x00, 0x0A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x70, 0x00, 0xC2, 0x00,
                    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x30, 0x00,
                    0x00, 0x0B, 0x60, 0x00, 0x80, 0x00, 0x00, 0xC0, 0x00, 0xA0, 0x00, 0x00,
                    0x00, 0xE0, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x00, 0xF0, 0x00,
                    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0x01, 0x02, 0xD0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0xB0,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x05, 0x09,
                    0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x02, 0x0F, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x06, 0x80, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_2, 2, expected_2, static4_2);

                var static2_3 = new byte[FingerprintConsts.SmallContextLength];
                expected_2.AsSpan().CopyTo(static2_3.AsSpan());
                var static4_3_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xFE, 0x46, 0x4C, 0xBF, 0x1A, 0x08, 0x35, 0xCA, 0x00, 0x20, 0x64, 0x18,
                    0xCB, 0x2C, 0xE0, 0x68, 0x00, 0x9E, 0x69, 0x08, 0x8B, 0xB6, 0x90, 0x06,
                    0x67, 0x9F, 0xAF, 0x25, 0xDE, 0xA5, 0xBB, 0x2B, 0xE0, 0x80, 0x72, 0xE0,
                    0x21, 0x2F, 0xA3, 0x67, 0x99, 0x16, 0x25, 0xDB, 0x45, 0x97, 0x8B, 0x88,
                    0x48, 0xFC, 0xA5, 0x3E, 0x78, 0x7C, 0x5E, 0x8F, 0x53, 0x73, 0xDB, 0x8F,
                    0xCC, 0x97, 0xF5, 0x70, 0xE9, 0x5C, 0x75, 0xFC, 0x9C, 0x0D, 0x21, 0xEF,
                    0xCA, 0x6E, 0xD5, 0x66, 0xFA, 0x2C, 0xCA, 0x17, 0xA3, 0x72, 0x49, 0xA7,
                    0xFE, 0xF4, 0x2C, 0xB4, 0x5C, 0xF4, 0x1E, 0x21, 0x73, 0x4E, 0xB9, 0x7A,
                    0x5D, 0x81, 0x28, 0x9E, 0xF6, 0x0F, 0x18, 0x91, 0xF6, 0x7A, 0x59, 0x67,
                    0x0B, 0x28, 0xB2, 0xA0, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0xA3, 0x6D, 0x83, 0x7C, 0x37, 0x35, 0xB2, 0xAB, 0x9A, 0x00, 0x1E, 0xC0,
                    0x48, 0x55, 0x2C, 0x01, 0xCE, 0x75, 0x6A, 0xFF, 0x78, 0xFC, 0xC6, 0xBC,
                    0xB3, 0x66, 0xF7, 0x06, 0x6E, 0x47, 0x50, 0xC1, 0x79, 0x96, 0x8C, 0x8F,
                    0x8A, 0x2A, 0x07, 0xD0, 0x03, 0x3A, 0x86, 0x39, 0x6E, 0x3F, 0x5C, 0x00,
                    0x9C, 0x9F, 0xA1, 0xAE, 0x97, 0x78, 0xC6, 0xFC, 0xDC, 0x59, 0x56, 0x36,
                    0xDA, 0x8C, 0x7C, 0xFE, 0xD0, 0xE3, 0x51, 0x5E,
};
                var static4_3 = MemoryMarshal.Cast<byte, uint>(static4_3_b.AsSpan()).ToArray();
                var expected_3 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x30,
                    0x00, 0xE1, 0x00, 0x0B, 0x00, 0x80, 0x00, 0xA0, 0x03, 0x00, 0x00, 0x02,
                    0x00, 0x0D, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
                    0x30, 0x00, 0xD0, 0x00, 0x00, 0x10, 0x2B, 0x00, 0xA0, 0x00, 0x43, 0xB5,
                    0x00, 0x0A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x70, 0x00, 0xC2, 0xB0,
                    0x00, 0x4A, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x10, 0x00, 0x00, 0xF0, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x00, 0xB0, 0x00, 0x00, 0x0B, 0x00, 0x30, 0x00,
                    0x00, 0x0B, 0x60, 0x00, 0x80, 0x00, 0x00, 0xC0, 0x00, 0xA3, 0x00, 0x0F,
                    0x00, 0xE0, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x00, 0xF0, 0x80,
                    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x48, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0xD1, 0x02, 0xD0, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x04, 0x07, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x07, 0x00, 0x70, 0xB0,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x06, 0x00, 0x00, 0x05, 0x09,
                    0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x20, 0x03, 0x0D, 0x00, 0x00, 0x40, 0x00, 0x0E,
                    0x02, 0x0F, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x06, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x00, 0x01, 0xD0, 0x00, 0x00,
                    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_3, 3, expected_3, static4_3);

                var static2_4 = new byte[FingerprintConsts.SmallContextLength];
                expected_3.AsSpan().CopyTo(static2_4.AsSpan());
                var static4_4_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xFE, 0x46, 0x4C, 0xBF, 0xC7, 0x38, 0xFB, 0x66, 0x00, 0x20, 0x64, 0x18,
                    0xCB, 0x2C, 0xE0, 0x68, 0xEB, 0x77, 0x22, 0xAA, 0x8B, 0xB6, 0x90, 0x06,
                    0x67, 0x9F, 0xAF, 0x25, 0xDE, 0xA5, 0xBB, 0x2B, 0xE0, 0x80, 0x72, 0xE0,
                    0x21, 0x2F, 0xA3, 0x67, 0x99, 0x16, 0x25, 0xDB, 0x45, 0x97, 0x8B, 0x88,
                    0xC2, 0x1D, 0x3C, 0x36, 0x78, 0x7C, 0x5E, 0x8F, 0x53, 0x73, 0xDB, 0x8F,
                    0xC8, 0x94, 0x7C, 0x82, 0x91, 0x01, 0x1A, 0x1C, 0x9C, 0x0D, 0x21, 0xEF,
                    0x69, 0xAA, 0xB5, 0x3A, 0xFA, 0x2C, 0xCA, 0x17, 0x4B, 0x53, 0xFC, 0x41,
                    0xFE, 0xF4, 0x2C, 0xB4, 0x5C, 0xF4, 0x1E, 0x21, 0x73, 0x4E, 0xB9, 0x7A,
                    0x5D, 0x81, 0x28, 0x9E, 0xF6, 0x0F, 0x18, 0x91, 0xF6, 0x7A, 0x59, 0x67,
                    0x3D, 0x6D, 0xCD, 0x4D, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0x82, 0x84, 0xDB, 0xF8, 0x53, 0xDD, 0x4F, 0x44, 0x9A, 0x00, 0x1E, 0xC0,
                    0x62, 0xE0, 0x5F, 0xE0, 0xCE, 0x75, 0x6A, 0xFF, 0x78, 0xFC, 0xC6, 0xBC,
                    0x50, 0xF0, 0x28, 0x8D, 0x6E, 0x47, 0x50, 0xC1, 0xDA, 0x37, 0x64, 0x83,
                    0x8A, 0x2A, 0x07, 0xD0, 0x2F, 0x29, 0x7A, 0x10, 0x6E, 0x3F, 0x5C, 0x00,
                    0x9C, 0x9F, 0xA1, 0xAE, 0xF9, 0x40, 0xAC, 0x87, 0xDC, 0x59, 0x56, 0x36,
                    0xDA, 0x8C, 0x7C, 0xFE, 0xD0, 0xE3, 0x51, 0x5E,
};
                var static4_4 = MemoryMarshal.Cast<byte, uint>(static4_4_b.AsSpan()).ToArray();
                var expected_4 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x09, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x30,
                    0x00, 0xE1, 0x00, 0x0B, 0x00, 0x80, 0x00, 0xA0, 0x03, 0x00, 0xA0, 0x02,
                    0x00, 0x0D, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
                    0x30, 0x00, 0xD0, 0x00, 0x00, 0x10, 0x2B, 0x00, 0xA0, 0x00, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x70, 0x00, 0xC2, 0xB0,
                    0x02, 0x4A, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x10, 0x30, 0xC0, 0xFB, 0x00,
                    0x70, 0x00, 0x00, 0x01, 0x00, 0xB0, 0x00, 0x00, 0x0B, 0x00, 0x30, 0x00,
                    0x00, 0x0B, 0x60, 0x00, 0x80, 0x00, 0x0E, 0xC0, 0x00, 0xA3, 0x00, 0x0F,
                    0x00, 0xE0, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x00, 0xF0, 0x80,
                    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x48, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0xD1, 0x02, 0xD0, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x04, 0x07, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x07, 0x00, 0x70, 0xB0,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xC0, 0x06, 0x00, 0x00, 0x05, 0x09,
                    0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x04, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x20, 0x03, 0x0D, 0x00, 0x00, 0x40, 0x00, 0x0E,
                    0x02, 0x0F, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x06, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x00, 0x01, 0xD0, 0x00, 0x00,
                    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_4, 4, expected_4, static4_4);

                var static2_5 = new byte[FingerprintConsts.SmallContextLength];
                expected_4.AsSpan().CopyTo(static2_5.AsSpan());
                var static4_5_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xFE, 0x46, 0x4C, 0xBF, 0xC7, 0x38, 0xFB, 0x66, 0x2B, 0x96, 0x26, 0xC7,
                    0x0F, 0xA6, 0x82, 0xE7, 0xF1, 0x5F, 0xED, 0xB7, 0x8B, 0xB6, 0x90, 0x06,
                    0xA1, 0x2B, 0x9D, 0x47, 0xFC, 0x1F, 0xB9, 0xCA, 0xE0, 0x80, 0x72, 0xE0,
                    0xBA, 0xB8, 0xF9, 0xFF, 0x99, 0x16, 0x25, 0xDB, 0x45, 0x97, 0x8B, 0x88,
                    0xC2, 0x1D, 0x3C, 0x36, 0xD8, 0xAC, 0x0A, 0xF3, 0x53, 0x73, 0xDB, 0x8F,
                    0xC8, 0x94, 0x7C, 0x82, 0x91, 0x01, 0x1A, 0x1C, 0x9C, 0x0D, 0x21, 0xEF,
                    0x49, 0x19, 0xB6, 0x3B, 0xFA, 0x2C, 0xCA, 0x17, 0x4B, 0x53, 0xFC, 0x41,
                    0xF2, 0x0A, 0x41, 0x4A, 0x95, 0x83, 0x38, 0x57, 0x73, 0x4E, 0xB9, 0x7A,
                    0x94, 0x19, 0xFB, 0xE1, 0x43, 0x8B, 0x84, 0x31, 0xF6, 0x7A, 0x59, 0x67,
                    0x3D, 0x6D, 0xCD, 0x4D, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0x82, 0x84, 0xDB, 0xF8, 0xF8, 0x73, 0x48, 0xAA, 0x9A, 0x00, 0x1E, 0xC0,
                    0x62, 0xE0, 0x5F, 0xE0, 0x81, 0x8D, 0x1D, 0x5F, 0x78, 0xFC, 0xC6, 0xBC,
                    0x70, 0xFF, 0x3B, 0xF6, 0xE0, 0x22, 0x87, 0x45, 0xDA, 0x37, 0x64, 0x83,
                    0x8A, 0x2A, 0x07, 0xD0, 0x2F, 0x29, 0x7A, 0x10, 0x26, 0x32, 0xBE, 0x03,
                    0x2C, 0x80, 0x8A, 0x32, 0xEB, 0xF7, 0xD4, 0x33, 0x43, 0x9C, 0x29, 0xF1,
                    0x5E, 0x6E, 0x59, 0x0A, 0xD0, 0xE3, 0x51, 0x5E,
};
                var static4_5 = MemoryMarshal.Cast<byte, uint>(static4_5_b.AsSpan()).ToArray();
                var expected_5 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x09, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x30,
                    0x00, 0xE1, 0x00, 0x0B, 0x00, 0x80, 0x00, 0xA3, 0x03, 0x00, 0xA0, 0x02,
                    0x00, 0x0D, 0x00, 0x20, 0x00, 0x00, 0x70, 0x00, 0x00, 0x09, 0x00, 0x00,
                    0x30, 0x00, 0xD0, 0x00, 0xE0, 0x10, 0x2B, 0x00, 0xAB, 0x00, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x70, 0x00, 0xC2, 0xB0,
                    0x02, 0x4A, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x10, 0x30, 0xC0, 0xFB, 0x00,
                    0x70, 0x00, 0x00, 0x01, 0x05, 0xB0, 0x00, 0x00, 0x0B, 0x00, 0x30, 0x00,
                    0x00, 0x0B, 0x60, 0x00, 0x80, 0x00, 0x0E, 0xC0, 0xA0, 0xA3, 0x00, 0x0F,
                    0xF0, 0xE0, 0x00, 0x03, 0x00, 0x00, 0xE4, 0x00, 0xA0, 0x00, 0xF0, 0x80,
                    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x48, 0x00, 0x00,
                    0x00, 0x00, 0xD0, 0xD1, 0x02, 0xD0, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x04, 0x07, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x07, 0x00, 0x70, 0xB0,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xC0, 0x06, 0x0D, 0x00, 0x05, 0x09,
                    0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x50, 0x06, 0x0B, 0x60, 0x50, 0x00, 0x04, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x20, 0x03, 0x0D, 0x00, 0x00, 0x44, 0x00, 0x0E,
                    0x02, 0x0F, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0xF6, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x00, 0x01, 0xD0, 0x00, 0x80,
                    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_5, 5, expected_5, static4_5);

                var static2_6 = new byte[FingerprintConsts.SmallContextLength];
                expected_5.AsSpan().CopyTo(static2_6.AsSpan());
                var static4_6_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xFE, 0x46, 0x4C, 0xBF, 0xC7, 0x38, 0xFB, 0x66, 0x2B, 0x96, 0x26, 0xC7,
                    0xF1, 0x0B, 0xF4, 0x05, 0xF1, 0x5F, 0xED, 0xB7, 0x8B, 0xB6, 0x90, 0x06,
                    0xA1, 0x2B, 0x9D, 0x47, 0xFC, 0x1F, 0xB9, 0xCA, 0xE0, 0x80, 0x72, 0xE0,
                    0xBA, 0xB8, 0xF9, 0xFF, 0x99, 0x16, 0x25, 0xDB, 0x0D, 0x36, 0x56, 0x80,
                    0xCB, 0xC0, 0xC0, 0x1B, 0xD8, 0xAC, 0x0A, 0xF3, 0x53, 0x73, 0xDB, 0x8F,
                    0x65, 0x50, 0x8A, 0x3B, 0x91, 0x01, 0x1A, 0x1C, 0x9C, 0x0D, 0x21, 0xEF,
                    0x49, 0x19, 0xB6, 0x3B, 0xFA, 0x2C, 0xCA, 0x17, 0x4B, 0x53, 0xFC, 0x41,
                    0xF2, 0x0A, 0x41, 0x4A, 0x95, 0x83, 0x38, 0x57, 0x73, 0x4E, 0xB9, 0x7A,
                    0x94, 0x19, 0xFB, 0xE1, 0x43, 0x8B, 0x84, 0x31, 0xF6, 0x7A, 0x59, 0x67,
                    0x3D, 0x6D, 0xCD, 0x4D, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0x15, 0xEE, 0xD7, 0x84, 0xF8, 0x73, 0x48, 0xAA, 0xAA, 0x8E, 0x6B, 0xF1,
                    0x62, 0xE0, 0x5F, 0xE0, 0x81, 0x8D, 0x1D, 0x5F, 0x78, 0xFC, 0xC6, 0xBC,
                    0x58, 0x9D, 0x60, 0x46, 0xE0, 0x22, 0x87, 0x45, 0xDA, 0x37, 0x64, 0x83,
                    0x8A, 0x2A, 0x07, 0xD0, 0xDE, 0x42, 0xA2, 0x16, 0x25, 0xCE, 0x94, 0x8D,
                    0x2C, 0x80, 0x8A, 0x32, 0xEB, 0xF7, 0xD4, 0x33, 0x43, 0x9C, 0x29, 0xF1,
                    0x5E, 0x6E, 0x59, 0x0A, 0xD0, 0xE3, 0x51, 0x5E,
};
                var static4_6 = MemoryMarshal.Cast<byte, uint>(static4_6_b.AsSpan()).ToArray();
                var expected_6 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0xE0, 0x00, 0x00,
                    0x00, 0x09, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x30,
                    0x00, 0xE1, 0x00, 0x0B, 0x00, 0x8A, 0x00, 0xA3, 0x03, 0x00, 0xA0, 0x02,
                    0x00, 0x0D, 0x00, 0x20, 0x00, 0x00, 0x70, 0x00, 0x00, 0xC9, 0x00, 0x0C,
                    0x30, 0x00, 0xD0, 0x00, 0xE0, 0x10, 0x2B, 0x00, 0xAB, 0x00, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
                    0x60, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0F, 0x70, 0x00, 0xC2, 0xB0,
                    0x02, 0x4A, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x10, 0x30, 0xC0, 0xFB, 0x40,
                    0x70, 0x00, 0x00, 0x01, 0x05, 0xBF, 0x00, 0x01, 0x0B, 0x01, 0x30, 0x00,
                    0x00, 0x0B, 0x60, 0x00, 0x80, 0x00, 0x0E, 0xC0, 0xA0, 0xA3, 0x00, 0x0F,
                    0xF0, 0xE0, 0x00, 0x03, 0x00, 0x00, 0xE4, 0x70, 0xA0, 0x00, 0xF0, 0x80,
                    0x0C, 0x00, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 0x06, 0x48, 0x00, 0x00,
                    0x00, 0x05, 0xD0, 0xD1, 0x02, 0xD0, 0x22, 0x00, 0x03, 0x00, 0x00, 0x30,
                    0x04, 0x07, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0F, 0x07, 0x00, 0x70, 0xB0,
                    0x00, 0x00, 0x00, 0x0F, 0x00, 0x20, 0xC1, 0x06, 0x0D, 0x00, 0x05, 0x09,
                    0x70, 0x00, 0x00, 0x0C, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0F, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x50, 0x06, 0x0B, 0x60, 0x50, 0x00, 0x04, 0x09, 0x00,
                    0x00, 0x00, 0x70, 0x01, 0x20, 0x03, 0x0D, 0x00, 0x0C, 0x44, 0xD0, 0x0E,
                    0x02, 0x0F, 0x00, 0x00, 0x0E, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00,
                    0xD0, 0xF6, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x00, 0xD1, 0xD0, 0x00, 0x8E,
                    0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_6, 6, expected_6, static4_6);

                var static2_7 = new byte[FingerprintConsts.SmallContextLength];
                expected_6.AsSpan().CopyTo(static2_7.AsSpan());
                var static4_7_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0x36, 0xAE, 0x13, 0x17, 0xC7, 0x38, 0xFB, 0x66, 0x46, 0x7D, 0xE1, 0xFD,
                    0x4C, 0x36, 0x8F, 0xCF, 0x6A, 0x85, 0xB5, 0x83, 0x8B, 0xB6, 0x90, 0x06,
                    0xA1, 0x2B, 0x9D, 0x47, 0xFD, 0x0C, 0xBB, 0x53, 0xFE, 0x6C, 0xC7, 0x14,
                    0xBA, 0xB8, 0xF9, 0xFF, 0x99, 0x16, 0x25, 0xDB, 0x0D, 0x36, 0x56, 0x80,
                    0xCB, 0xC0, 0xC0, 0x1B, 0xD8, 0xAC, 0x0A, 0xF3, 0xDD, 0x87, 0x95, 0x78,
                    0x99, 0x95, 0xAD, 0x0A, 0x53, 0x79, 0x7A, 0x35, 0x55, 0xBD, 0x86, 0x38,
                    0x49, 0x19, 0xB6, 0x3B, 0xFA, 0x2C, 0xCA, 0x17, 0x4B, 0x53, 0xFC, 0x41,
                    0x9E, 0xBE, 0xAB, 0xAA, 0x56, 0xDA, 0xCC, 0x6A, 0xA9, 0x51, 0x91, 0xB5,
                    0x94, 0x19, 0xFB, 0xE1, 0x45, 0x58, 0x8D, 0x99, 0xF6, 0x7A, 0x59, 0x67,
                    0x3D, 0x6D, 0xCD, 0x4D, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0x15, 0xEE, 0xD7, 0x84, 0xDA, 0xAF, 0xF7, 0x22, 0xAA, 0x8E, 0x6B, 0xF1,
                    0xC2, 0x5C, 0x84, 0x92, 0x81, 0x8D, 0x1D, 0x5F, 0x68, 0xC3, 0x26, 0x95,
                    0xE8, 0xF8, 0xEB, 0xFB, 0xE0, 0x22, 0x87, 0x45, 0xDA, 0x37, 0x64, 0x83,
                    0xCE, 0xE5, 0xCD, 0x8D, 0x8E, 0xE6, 0xC4, 0x67, 0xAA, 0x90, 0x74, 0x6F,
                    0x2C, 0x80, 0x8A, 0x32, 0x8F, 0x60, 0x5B, 0xAA, 0x43, 0x9C, 0x29, 0xF1,
                    0x5E, 0x6E, 0x59, 0x0A, 0xD0, 0xE3, 0x51, 0x5E,
};
                var static4_7 = MemoryMarshal.Cast<byte, uint>(static4_7_b.AsSpan()).ToArray();
                var expected_7 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0xEA, 0x00, 0x00,
                    0x00, 0x09, 0xD0, 0x09, 0x00, 0x00, 0x00, 0x75, 0x05, 0x00, 0x00, 0x30,
                    0x00, 0xE1, 0x0B, 0x0B, 0x00, 0x8A, 0x00, 0xA3, 0x03, 0x00, 0xAE, 0x02,
                    0x00, 0x0D, 0x00, 0x2B, 0x00, 0xD0, 0x70, 0x05, 0x00, 0xC9, 0x00, 0x0C,
                    0x30, 0x08, 0xD0, 0x00, 0xE0, 0x10, 0x2B, 0x20, 0xAB, 0x00, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
                    0x60, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0F, 0x70, 0x00, 0xC2, 0xB0,
                    0x02, 0x4A, 0xF0, 0x00, 0x50, 0xB0, 0x00, 0x10, 0x30, 0xC0, 0xFB, 0x40,
                    0x70, 0x03, 0x00, 0x01, 0x05, 0xBF, 0x00, 0x01, 0x0B, 0x01, 0x30, 0x00,
                    0x0B, 0x0B, 0x60, 0x00, 0x80, 0x07, 0x0E, 0xC0, 0xA0, 0xA3, 0x00, 0x0F,
                    0xF0, 0xE0, 0x00, 0x03, 0x00, 0x00, 0xE4, 0x70, 0xA0, 0x00, 0xF0, 0x80,
                    0xBC, 0x09, 0x05, 0x00, 0x30, 0x00, 0x80, 0x00, 0x06, 0x48, 0x00, 0x0A,
                    0x00, 0x05, 0xD0, 0xD1, 0x02, 0xD0, 0x22, 0x01, 0x03, 0x00, 0x00, 0x30,
                    0x04, 0x07, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x0F, 0x07, 0xE0, 0x70, 0xB0,
                    0x00, 0x00, 0x00, 0x0F, 0x0C, 0x2D, 0xC1, 0x06, 0x0D, 0x00, 0x05, 0x09,
                    0x7D, 0x00, 0x00, 0x0C, 0x00, 0x0A, 0x90, 0x00, 0x00, 0x0F, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x50, 0x06, 0x0B, 0x6C, 0x50, 0x00, 0x04, 0x09, 0x00,
                    0x00, 0x00, 0x70, 0xD1, 0x20, 0x33, 0x0D, 0x00, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x00, 0x00, 0x0E, 0xB4, 0x00, 0x00, 0x00, 0xE0, 0x0D, 0x00,
                    0xD0, 0xF6, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x00, 0xD1, 0xD0, 0x00, 0x8E,
                    0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_7, 7, expected_7, static4_7);

                var static2_8 = new byte[FingerprintConsts.SmallContextLength];
                expected_7.AsSpan().CopyTo(static2_8.AsSpan());
                var static4_8_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0x36, 0xAE, 0x13, 0x17, 0xC7, 0x38, 0xFB, 0x66, 0x42, 0x3B, 0x45, 0x37,
                    0xDC, 0x52, 0xE4, 0x17, 0x6A, 0x85, 0xB5, 0x83, 0xF4, 0x17, 0xDD, 0xEA,
                    0xA1, 0x2B, 0x9D, 0x47, 0xCD, 0xC6, 0xD5, 0x6E, 0xFE, 0x6C, 0xC7, 0x14,
                    0xBA, 0xB8, 0xF9, 0xFF, 0x99, 0x16, 0x25, 0xDB, 0x5D, 0x43, 0x48, 0x23,
                    0xCB, 0xC0, 0xC0, 0x1B, 0xD8, 0xAC, 0x0A, 0xF3, 0xDD, 0x87, 0x95, 0x78,
                    0x99, 0x95, 0xAD, 0x0A, 0x73, 0x52, 0xD1, 0x58, 0x55, 0xBD, 0x86, 0x38,
                    0x49, 0x19, 0xB6, 0x3B, 0xFA, 0x2C, 0xCA, 0x17, 0x50, 0x88, 0x25, 0x96,
                    0x9E, 0xBE, 0xAB, 0xAA, 0x56, 0xDA, 0xCC, 0x6A, 0xA9, 0x51, 0x91, 0xB5,
                    0x94, 0x19, 0xFB, 0xE1, 0x3B, 0x31, 0x5C, 0x12, 0xF6, 0x7A, 0x59, 0x67,
                    0x3D, 0x6D, 0xCD, 0x4D, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0x15, 0xEE, 0xD7, 0x84, 0xDA, 0xAF, 0xF7, 0x22, 0xAA, 0x8E, 0x6B, 0xF1,
                    0xC2, 0x5C, 0x84, 0x92, 0x81, 0x8D, 0x1D, 0x5F, 0x68, 0xC3, 0x26, 0x95,
                    0x36, 0xA4, 0xA4, 0x33, 0xE0, 0x22, 0x87, 0x45, 0xDA, 0x37, 0x64, 0x83,
                    0x4C, 0x46, 0x75, 0x1B, 0x8E, 0xE6, 0xC4, 0x67, 0x9B, 0xCA, 0xCB, 0x49,
                    0x54, 0x8D, 0x9F, 0xDF, 0x8F, 0x60, 0x5B, 0xAA, 0x43, 0x9C, 0x29, 0xF1,
                    0xE1, 0xD8, 0x70, 0x0A, 0xD0, 0xE3, 0x51, 0x5E,
};
                var static4_8 = MemoryMarshal.Cast<byte, uint>(static4_8_b.AsSpan()).ToArray();
                var expected_8 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0xEA, 0x00, 0x00,
                    0x00, 0x09, 0xD0, 0x09, 0x00, 0x00, 0x00, 0x75, 0x05, 0x00, 0x00, 0x30,
                    0x00, 0xE1, 0x0B, 0x0B, 0x00, 0x8A, 0x00, 0xA3, 0x03, 0x00, 0xAE, 0x02,
                    0x00, 0x0D, 0x00, 0x2B, 0x00, 0xD0, 0x70, 0x05, 0x00, 0xC9, 0x00, 0x0C,
                    0x30, 0x08, 0xD0, 0x05, 0xE0, 0x10, 0x2B, 0x20, 0xAB, 0x00, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
                    0x60, 0x00, 0x00, 0x00, 0x08, 0x00, 0xE0, 0x0F, 0x70, 0x00, 0xC2, 0xB0,
                    0x02, 0x4A, 0xF0, 0x00, 0x50, 0xB0, 0x00, 0x10, 0x30, 0xC0, 0xFB, 0x40,
                    0x70, 0x03, 0x00, 0x01, 0x05, 0xBF, 0x00, 0x01, 0x0B, 0x01, 0x34, 0x00,
                    0x0B, 0x0B, 0x60, 0x00, 0x80, 0x07, 0x0E, 0xC0, 0xA0, 0xA3, 0x00, 0x0F,
                    0xF0, 0xE0, 0x08, 0x03, 0x00, 0x00, 0xE4, 0x70, 0xA0, 0x00, 0xF0, 0x80,
                    0xBC, 0x09, 0x05, 0x00, 0x30, 0x00, 0x80, 0x00, 0x06, 0x48, 0x00, 0x0A,
                    0x00, 0xC5, 0xD0, 0xD1, 0x02, 0xD0, 0x22, 0x01, 0x03, 0x00, 0x00, 0x30,
                    0x04, 0x07, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x0F, 0x07, 0xE0, 0x70, 0xB0,
                    0x00, 0x00, 0x00, 0x8F, 0x3C, 0x2D, 0xC1, 0x06, 0x0D, 0x00, 0x05, 0x09,
                    0x7D, 0x00, 0x70, 0x0C, 0x00, 0x0A, 0x90, 0x00, 0x00, 0x0F, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x50, 0x06, 0x0B, 0x6C, 0x50, 0x40, 0x04, 0xE9, 0x00,
                    0x00, 0x00, 0x70, 0xD1, 0x20, 0x33, 0x0D, 0x40, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x00, 0x00, 0x0E, 0xB4, 0x00, 0x00, 0x00, 0xE0, 0x0D, 0x00,
                    0xD0, 0xF6, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x00, 0xD1, 0xD0, 0x00, 0x8E,
                    0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_8, 8, expected_8, static4_8);

                var static2_9 = new byte[FingerprintConsts.SmallContextLength];
                expected_8.AsSpan().CopyTo(static2_9.AsSpan());
                var static4_9_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0x36, 0xAE, 0x13, 0x17, 0xC7, 0x38, 0xFB, 0x66, 0x42, 0x3B, 0x45, 0x37,
                    0xD7, 0x5C, 0xBA, 0x14, 0x6A, 0x85, 0xB5, 0x83, 0xF4, 0x17, 0xDD, 0xEA,
                    0xA1, 0x2B, 0x9D, 0x47, 0x95, 0x39, 0x43, 0x5C, 0x50, 0x55, 0xCB, 0xBF,
                    0xBA, 0xB8, 0xF9, 0xFF, 0x99, 0x16, 0x25, 0xDB, 0x5D, 0x43, 0x48, 0x23,
                    0xCB, 0xC0, 0xC0, 0x1B, 0x28, 0xAA, 0x14, 0x9D, 0xDD, 0x87, 0x95, 0x78,
                    0xAE, 0xC6, 0x27, 0x4E, 0x73, 0x52, 0xD1, 0x58, 0x11, 0x7D, 0x8F, 0x65,
                    0xEB, 0x3C, 0xFB, 0x4D, 0xBE, 0xBD, 0x46, 0x71, 0x73, 0x0C, 0x7D, 0x2F,
                    0x39, 0x7F, 0xE3, 0xD9, 0x56, 0xDA, 0xCC, 0x6A, 0xA9, 0x51, 0x91, 0xB5,
                    0x8C, 0xC2, 0xA1, 0x27, 0x3B, 0x31, 0x5C, 0x12, 0xF6, 0x7A, 0x59, 0x67,
                    0x8D, 0x43, 0x5D, 0xEB, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0x15, 0xEE, 0xD7, 0x84, 0xDA, 0xAF, 0xF7, 0x22, 0x17, 0x89, 0x15, 0xBB,
                    0xC2, 0x5C, 0x84, 0x92, 0x81, 0x8D, 0x1D, 0x5F, 0xFA, 0xFB, 0x75, 0x2B,
                    0x36, 0xA4, 0xA4, 0x33, 0xE0, 0x22, 0x87, 0x45, 0xDA, 0x37, 0x64, 0x83,
                    0x84, 0xFC, 0x0E, 0x80, 0x8E, 0xE6, 0xC4, 0x67, 0xDA, 0x7F, 0xFA, 0x95,
                    0x54, 0x8D, 0x9F, 0xDF, 0x8F, 0x60, 0x5B, 0xAA, 0x43, 0x9C, 0x29, 0xF1,
                    0xE1, 0xD8, 0x70, 0x0A, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_9 = MemoryMarshal.Cast<byte, uint>(static4_9_b.AsSpan()).ToArray();
                var expected_9 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0xEA, 0x00, 0x00,
                    0x00, 0x09, 0xD0, 0x09, 0x00, 0x0D, 0xF0, 0x75, 0x05, 0x00, 0x00, 0x30,
                    0x60, 0xE1, 0x0B, 0x0B, 0xE0, 0x8A, 0x00, 0xA3, 0x03, 0xB0, 0xAE, 0x02,
                    0x00, 0xFD, 0x00, 0x2B, 0x00, 0xD0, 0x70, 0x05, 0x00, 0xC9, 0xD0, 0x0C,
                    0x30, 0x88, 0xD0, 0x05, 0xE0, 0x10, 0x2B, 0x20, 0xAB, 0x00, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0xA0, 0x00, 0x00, 0x0F, 0x00, 0xC0, 0x00, 0x04,
                    0x60, 0x00, 0x00, 0x00, 0x08, 0x00, 0xE0, 0x0F, 0x70, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x01, 0x50, 0xB0, 0x00, 0x10, 0x3A, 0xC0, 0xFB, 0x40,
                    0x70, 0x03, 0x00, 0x01, 0x05, 0xBF, 0x00, 0x01, 0x0B, 0x01, 0x34, 0x10,
                    0x0B, 0x0B, 0x60, 0x0E, 0x80, 0x07, 0x0E, 0xC0, 0xA0, 0xA3, 0x02, 0x0F,
                    0xF0, 0xE2, 0x58, 0x03, 0x04, 0x00, 0xE4, 0x70, 0xA0, 0x00, 0xF0, 0x80,
                    0xBC, 0xA9, 0x05, 0x00, 0x30, 0x02, 0x80, 0x0E, 0x06, 0x48, 0x00, 0x0A,
                    0x00, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x01, 0x03, 0x00, 0x00, 0x30,
                    0x04, 0x07, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x0F, 0x07, 0xE0, 0x70, 0xB0,
                    0xF0, 0x00, 0xD0, 0x8F, 0x3C, 0x2D, 0xC1, 0x06, 0x0D, 0x00, 0x05, 0x09,
                    0x7D, 0x00, 0x70, 0x9C, 0x00, 0x0A, 0x90, 0x00, 0x00, 0x0F, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x50, 0x06, 0x0B, 0x6C, 0x50, 0x40, 0x04, 0xE9, 0x00,
                    0x00, 0x00, 0x70, 0xD1, 0x20, 0x33, 0x0D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x00, 0x00, 0x0E, 0xB4, 0x07, 0x00, 0x00, 0xE0, 0x0D, 0x00,
                    0xD0, 0xF6, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x00, 0xD1, 0xD0, 0x70, 0x8E,
                    0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_9, 9, expected_9, static4_9);

                var static2_10 = new byte[FingerprintConsts.SmallContextLength];
                expected_9.AsSpan().CopyTo(static2_10.AsSpan());
                var static4_10_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0x36, 0xAE, 0x13, 0x17, 0xE9, 0x11, 0xC2, 0x21, 0x50, 0xF3, 0x83, 0x86,
                    0xD7, 0x5C, 0xBA, 0x14, 0x6A, 0x85, 0xB5, 0x83, 0xF4, 0x17, 0xDD, 0xEA,
                    0xA1, 0x2B, 0x9D, 0x47, 0x95, 0x39, 0x43, 0x5C, 0xF0, 0x38, 0x69, 0xF6,
                    0xBA, 0xB8, 0xF9, 0xFF, 0x99, 0x16, 0x25, 0xDB, 0x5D, 0x43, 0x48, 0x23,
                    0xFD, 0x3E, 0xD2, 0x34, 0x28, 0xAA, 0x14, 0x9D, 0xDD, 0x87, 0x95, 0x78,
                    0xCE, 0xF4, 0x2F, 0x1D, 0x73, 0x52, 0xD1, 0x58, 0x3D, 0x53, 0xDE, 0x5E,
                    0xEB, 0x3C, 0xFB, 0x4D, 0xBE, 0xBD, 0x46, 0x71, 0x73, 0x0C, 0x7D, 0x2F,
                    0x39, 0x7F, 0xE3, 0xD9, 0x56, 0xDA, 0xCC, 0x6A, 0xA9, 0x51, 0x91, 0xB5,
                    0xC7, 0xF9, 0x27, 0x04, 0x3B, 0x31, 0x5C, 0x12, 0xF6, 0x7A, 0x59, 0x67,
                    0x8D, 0x43, 0x5D, 0xEB, 0x41, 0xBC, 0x61, 0xDF, 0x83, 0x8F, 0x3F, 0x10,
                    0x15, 0xEE, 0xD7, 0x84, 0xDA, 0xAF, 0xF7, 0x22, 0x17, 0x89, 0x15, 0xBB,
                    0xC2, 0x5C, 0x84, 0x92, 0xBB, 0xB5, 0x87, 0x12, 0xFA, 0xFB, 0x75, 0x2B,
                    0x36, 0xA4, 0xA4, 0x33, 0xE0, 0x22, 0x87, 0x45, 0xDA, 0x37, 0x64, 0x83,
                    0x9C, 0x0F, 0x45, 0x3A, 0x8E, 0xE6, 0xC4, 0x67, 0xDA, 0x7F, 0xFA, 0x95,
                    0x54, 0x8D, 0x9F, 0xDF, 0x8F, 0x60, 0x5B, 0xAA, 0xE5, 0x0B, 0x79, 0x2D,
                    0xE1, 0xD8, 0x70, 0x0A, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_10 = MemoryMarshal.Cast<byte, uint>(static4_10_b.AsSpan()).ToArray();
                var expected_10 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0xEA, 0x00, 0x00,
                    0x00, 0x09, 0xDD, 0x09, 0x00, 0x0D, 0xF0, 0x75, 0x05, 0x00, 0x3D, 0x30,
                    0x60, 0xE1, 0x9B, 0x4B, 0xE0, 0x8A, 0x00, 0xA3, 0x03, 0xB0, 0xAE, 0x02,
                    0x70, 0xFD, 0x0B, 0x2B, 0x00, 0xD0, 0x73, 0x05, 0x00, 0xC9, 0xD0, 0x0C,
                    0x30, 0x88, 0xD0, 0x05, 0xE0, 0x10, 0x2B, 0x20, 0xAB, 0x00, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0xA0, 0x01, 0x00, 0x0F, 0x10, 0xC0, 0x00, 0x04,
                    0x60, 0x00, 0x00, 0x00, 0x08, 0x00, 0xE0, 0x0F, 0x70, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x01, 0x50, 0xB0, 0x09, 0x10, 0x3A, 0xC0, 0xFB, 0x40,
                    0x70, 0x43, 0x00, 0x01, 0x05, 0xBF, 0x00, 0x01, 0x0B, 0x01, 0x34, 0x10,
                    0x0B, 0x0B, 0x60, 0x0E, 0x80, 0x07, 0x0E, 0xC0, 0xA0, 0xA3, 0x02, 0x0F,
                    0xF0, 0xE2, 0x58, 0x03, 0x04, 0x00, 0xE4, 0x70, 0xA0, 0x00, 0xF0, 0x80,
                    0xBC, 0xA9, 0x05, 0x0A, 0x30, 0x02, 0x80, 0x0E, 0x06, 0x48, 0x00, 0x0A,
                    0x00, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x01, 0x03, 0x00, 0x00, 0x30,
                    0x04, 0x97, 0x00, 0x00, 0x00, 0xE0, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF0, 0x60, 0xD0, 0x8F, 0x3C, 0x2D, 0xC1, 0x06, 0x0D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x04, 0x0A, 0x90, 0x00, 0x06, 0x0F, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x50, 0x06, 0x0B, 0x6C, 0x50, 0x45, 0x04, 0xE9, 0x00,
                    0x03, 0x00, 0x70, 0xD1, 0x20, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x00, 0x00, 0xFE, 0xB4, 0x07, 0xD0, 0x00, 0xE0, 0x0D, 0x00,
                    0xD0, 0xF6, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x30, 0xD1, 0xD0, 0x70, 0x8E,
                    0x00, 0x01, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_10, 10, expected_10, static4_10);

                var static2_11 = new byte[FingerprintConsts.SmallContextLength];
                expected_10.AsSpan().CopyTo(static2_11.AsSpan());
                var static4_11_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0x36, 0xAE, 0x13, 0x17, 0xE9, 0x11, 0xC2, 0x21, 0x50, 0xF3, 0x83, 0x86,
                    0xD7, 0x5C, 0xBA, 0x14, 0x6A, 0x85, 0xB5, 0x83, 0xF4, 0x17, 0xDD, 0xEA,
                    0xB1, 0x13, 0x5D, 0xCC, 0xD2, 0xE6, 0x89, 0x19, 0x36, 0x1D, 0xD1, 0xA4,
                    0xBA, 0xB8, 0xF9, 0xFF, 0x99, 0x16, 0x25, 0xDB, 0x33, 0xCD, 0xDC, 0x87,
                    0xFE, 0x7E, 0xA1, 0x27, 0x73, 0x1E, 0xEA, 0xC9, 0x85, 0x8D, 0xDE, 0xC8,
                    0xCE, 0xF4, 0x2F, 0x1D, 0x5F, 0x13, 0xE7, 0x3E, 0xE4, 0xF8, 0x6D, 0x80,
                    0xEB, 0x3C, 0xFB, 0x4D, 0xC2, 0x8A, 0x5E, 0xA9, 0x1D, 0xB3, 0x5A, 0x21,
                    0x39, 0x7F, 0xE3, 0xD9, 0xC5, 0x09, 0x9D, 0x7C, 0x23, 0x1D, 0x25, 0xA5,
                    0x12, 0x41, 0x0C, 0xC3, 0x3B, 0x31, 0x5C, 0x12, 0xF6, 0x7A, 0x59, 0x67,
                    0x8D, 0x43, 0x5D, 0xEB, 0x41, 0xBC, 0x61, 0xDF, 0x1D, 0x25, 0xF9, 0xC0,
                    0x15, 0xEE, 0xD7, 0x84, 0xDA, 0xAF, 0xF7, 0x22, 0x3A, 0xF2, 0x6B, 0x57,
                    0xFB, 0xBD, 0xA6, 0xE0, 0xF1, 0x87, 0x4D, 0xC9, 0xAE, 0xBD, 0xBF, 0x93,
                    0x36, 0xA4, 0xA4, 0x33, 0xE0, 0x22, 0x87, 0x45, 0xDA, 0x37, 0x64, 0x83,
                    0x9C, 0x0F, 0x45, 0x3A, 0x69, 0x64, 0xCF, 0xEF, 0xDA, 0x7F, 0xFA, 0x95,
                    0xF9, 0x0F, 0x53, 0x70, 0xD3, 0xEB, 0xA9, 0x59, 0x25, 0x23, 0x59, 0x4F,
                    0xE1, 0xD8, 0x70, 0x0A, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_11 = MemoryMarshal.Cast<byte, uint>(static4_11_b.AsSpan()).ToArray();
                var expected_11 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x00, 0xEA, 0x00, 0x00,
                    0x00, 0x09, 0xDD, 0x09, 0x00, 0x0D, 0xF0, 0x75, 0x05, 0x00, 0x3D, 0x30,
                    0x60, 0xE1, 0x9B, 0x4B, 0xE0, 0x8A, 0x00, 0xA3, 0x03, 0xB0, 0xAE, 0x02,
                    0x70, 0xFD, 0x0B, 0x2B, 0x00, 0xD0, 0x73, 0x05, 0x00, 0xC9, 0xD0, 0x0C,
                    0x30, 0x88, 0xD0, 0x05, 0xE0, 0x10, 0x2B, 0x20, 0xAB, 0x09, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0xA0, 0x01, 0x00, 0x0F, 0x10, 0xC0, 0x00, 0x04,
                    0x60, 0x00, 0x00, 0x00, 0x08, 0x00, 0xE0, 0x0F, 0x70, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x01, 0x50, 0xB0, 0x09, 0x10, 0x3A, 0xC0, 0xFB, 0x40,
                    0x70, 0x43, 0x00, 0x01, 0x05, 0xBF, 0x00, 0x01, 0x0B, 0x01, 0x34, 0x10,
                    0x0B, 0x0B, 0x6C, 0x0E, 0x80, 0x07, 0x0E, 0xC0, 0xAF, 0xA3, 0x02, 0x0F,
                    0xF0, 0xE2, 0x58, 0x03, 0x04, 0x00, 0xE4, 0x70, 0xA0, 0x00, 0xF0, 0x80,
                    0xBC, 0xA9, 0x05, 0x0A, 0x30, 0x02, 0x80, 0x0E, 0x06, 0x48, 0x00, 0x0A,
                    0x00, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x01, 0x03, 0x00, 0x00, 0x30,
                    0x04, 0x97, 0x00, 0x00, 0x09, 0xE9, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF0, 0x60, 0xD0, 0x8F, 0x3C, 0x2D, 0xC1, 0x06, 0x0D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x04, 0x0A, 0x90, 0x00, 0x06, 0x0F, 0x02, 0x0D,
                    0x00, 0x0F, 0x00, 0x50, 0x06, 0x0B, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0x00,
                    0x03, 0x06, 0x70, 0xD1, 0x20, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x00, 0x00, 0xFE, 0xB4, 0x07, 0xD0, 0x50, 0xE0, 0x0D, 0x00,
                    0xD0, 0xF6, 0x80, 0x00, 0xD1, 0x00, 0x00, 0x30, 0xD1, 0xD0, 0x70, 0x8E,
                    0x70, 0x01, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_11, 11, expected_11, static4_11);

                var static2_12 = new byte[FingerprintConsts.SmallContextLength];
                expected_11.AsSpan().CopyTo(static2_12.AsSpan());
                var static4_12_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xF4, 0x1E, 0x77, 0xF1, 0xE9, 0x11, 0xC2, 0x21, 0x9E, 0x56, 0xDB, 0x4B,
                    0x20, 0x59, 0x32, 0x57, 0x6A, 0x85, 0xB5, 0x83, 0xF4, 0x17, 0xDD, 0xEA,
                    0xD1, 0x63, 0xBC, 0x6C, 0xD2, 0x7A, 0x52, 0x93, 0xBB, 0x4C, 0x21, 0xBE,
                    0xBA, 0xB8, 0xF9, 0xFF, 0x9F, 0xCB, 0xED, 0x60, 0x33, 0xCD, 0xDC, 0x87,
                    0x8B, 0xC6, 0x72, 0xF6, 0x73, 0x1E, 0xEA, 0xC9, 0x85, 0x8D, 0xDE, 0xC8,
                    0x5C, 0xB6, 0xBB, 0x2E, 0x69, 0x7B, 0x01, 0x2E, 0xE4, 0xF8, 0x6D, 0x80,
                    0xF3, 0x71, 0x5E, 0xF0, 0xC2, 0x8A, 0x5E, 0xA9, 0x1D, 0xB3, 0x5A, 0x21,
                    0x39, 0x7F, 0xE3, 0xD9, 0xC5, 0x09, 0x9D, 0x7C, 0x52, 0x8B, 0xF1, 0xC1,
                    0x12, 0x41, 0x0C, 0xC3, 0x01, 0x3A, 0xC9, 0x8F, 0xF6, 0x7A, 0x59, 0x67,
                    0x8D, 0x43, 0x5D, 0xEB, 0x41, 0xBC, 0x61, 0xDF, 0x3F, 0xF3, 0xB5, 0x92,
                    0x15, 0xEE, 0xD7, 0x84, 0x0F, 0xB2, 0xE7, 0xB5, 0x3A, 0xF2, 0x6B, 0x57,
                    0xFB, 0xBD, 0xA6, 0xE0, 0xF1, 0x87, 0x4D, 0xC9, 0xAE, 0xBD, 0xBF, 0x93,
                    0x36, 0xA4, 0xA4, 0x33, 0xE0, 0x22, 0x87, 0x45, 0x92, 0xF9, 0x27, 0xEB,
                    0x7E, 0xEE, 0x63, 0xFF, 0x69, 0x64, 0xCF, 0xEF, 0xDA, 0x7F, 0xFA, 0x95,
                    0xCA, 0x9E, 0xD7, 0x5B, 0xFB, 0xBD, 0x1B, 0x93, 0x25, 0x23, 0x59, 0x4F,
                    0x05, 0x87, 0x57, 0xAE, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_12 = MemoryMarshal.Cast<byte, uint>(static4_12_b.AsSpan()).ToArray();
                var expected_12 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x0F, 0xEA, 0x00, 0x00,
                    0x00, 0x09, 0xDD, 0x09, 0x00, 0x0D, 0xF0, 0x75, 0x05, 0x00, 0x3D, 0x30,
                    0x60, 0xE1, 0x9B, 0x4B, 0xE0, 0x8A, 0x00, 0xA3, 0x03, 0xB0, 0xAE, 0x02,
                    0x7B, 0xFD, 0x0B, 0x2B, 0x40, 0xD0, 0x73, 0x05, 0x00, 0xC9, 0xD0, 0x0C,
                    0x30, 0x88, 0xD0, 0x05, 0xE0, 0x10, 0x2B, 0x20, 0xAB, 0x09, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0xA0, 0x01, 0x00, 0x0F, 0x10, 0xC0, 0x0E, 0x04,
                    0x60, 0x00, 0x00, 0x03, 0x08, 0x00, 0xE0, 0x0F, 0x70, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x01, 0x50, 0xB0, 0x09, 0x10, 0x3A, 0xC0, 0xFB, 0x40,
                    0x70, 0x43, 0x00, 0x01, 0x05, 0xBF, 0x00, 0x01, 0xEB, 0xF1, 0x34, 0x10,
                    0x0B, 0x0B, 0x6C, 0x5E, 0x80, 0x07, 0x0E, 0xC0, 0xAF, 0xA3, 0x02, 0x0F,
                    0xF2, 0xE2, 0x58, 0x03, 0x04, 0x00, 0xE4, 0x70, 0xA0, 0x00, 0xF0, 0x80,
                    0xBC, 0xA9, 0x25, 0x0A, 0x30, 0x02, 0x80, 0x0E, 0x06, 0x48, 0x03, 0x0A,
                    0x0B, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x01, 0x33, 0x00, 0x00, 0x30,
                    0x04, 0x97, 0x00, 0x00, 0x09, 0xE9, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF0, 0x60, 0xD0, 0x8F, 0x3C, 0x2D, 0xC1, 0x06, 0x9D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x94, 0x0A, 0x92, 0x00, 0x06, 0x0F, 0x02, 0x0D,
                    0x00, 0x3F, 0x00, 0x50, 0x06, 0xBB, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0x00,
                    0x03, 0x06, 0x70, 0xD1, 0x22, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x00, 0x04, 0xFE, 0xB4, 0x07, 0xD0, 0x50, 0xE0, 0x0D, 0x00,
                    0xD0, 0xF6, 0x80, 0xF0, 0xD1, 0x00, 0x00, 0x30, 0xD1, 0xD0, 0x70, 0x8E,
                    0x70, 0x01, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_12, 12, expected_12, static4_12);

                var static2_13 = new byte[FingerprintConsts.SmallContextLength];
                expected_12.AsSpan().CopyTo(static2_13.AsSpan());
                var static4_13_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xF4, 0x1E, 0x77, 0xF1, 0xE9, 0x11, 0xC2, 0x21, 0x9E, 0x56, 0xDB, 0x4B,
                    0x20, 0x59, 0x32, 0x57, 0x6A, 0x85, 0xB5, 0x83, 0xF4, 0x17, 0xDD, 0xEA,
                    0xD1, 0x63, 0xBC, 0x6C, 0xC1, 0x36, 0xE0, 0x59, 0xBB, 0x4C, 0x21, 0xBE,
                    0x1A, 0xB5, 0xB3, 0x84, 0x8D, 0x0A, 0x3C, 0x5D, 0x33, 0xCD, 0xDC, 0x87,
                    0x8B, 0xC6, 0x72, 0xF6, 0x73, 0x1E, 0xEA, 0xC9, 0x85, 0x8D, 0xDE, 0xC8,
                    0x74, 0x58, 0xBE, 0x5B, 0x69, 0x7B, 0x01, 0x2E, 0xE4, 0xF8, 0x6D, 0x80,
                    0xF3, 0x71, 0x5E, 0xF0, 0xC2, 0x8A, 0x5E, 0xA9, 0x1D, 0xB3, 0x5A, 0x21,
                    0x39, 0x7F, 0xE3, 0xD9, 0x39, 0xC7, 0x4A, 0xA5, 0x52, 0x8B, 0xF1, 0xC1,
                    0x4D, 0x11, 0xC9, 0xC3, 0x01, 0x3A, 0xC9, 0x8F, 0xF6, 0x7A, 0x59, 0x67,
                    0x8D, 0x43, 0x5D, 0xEB, 0x41, 0xBC, 0x61, 0xDF, 0x3F, 0xF3, 0xB5, 0x92,
                    0x15, 0xEE, 0xD7, 0x84, 0xD3, 0x32, 0x17, 0x0A, 0x3A, 0xF2, 0x6B, 0x57,
                    0xFB, 0xBD, 0xA6, 0xE0, 0xF1, 0x87, 0x4D, 0xC9, 0xAE, 0xBD, 0xBF, 0x93,
                    0x36, 0xA4, 0xA4, 0x33, 0xE0, 0x22, 0x87, 0x45, 0x92, 0xF9, 0x27, 0xEB,
                    0x10, 0x12, 0x82, 0x65, 0x69, 0x64, 0xCF, 0xEF, 0x70, 0x67, 0x1F, 0x56,
                    0x96, 0x44, 0x5A, 0x10, 0xFB, 0xBD, 0x1B, 0x93, 0x7D, 0x28, 0xFE, 0x36,
                    0x05, 0x87, 0x57, 0xAE, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_13 = MemoryMarshal.Cast<byte, uint>(static4_13_b.AsSpan()).ToArray();
                var expected_13 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x0F, 0xEA, 0x00, 0x00,
                    0x00, 0x09, 0xDD, 0x09, 0x00, 0x0D, 0xF0, 0x75, 0x05, 0x00, 0x3D, 0x30,
                    0x60, 0xE1, 0x9B, 0x4B, 0xE0, 0x8A, 0x00, 0xA3, 0x03, 0xB0, 0xAE, 0x02,
                    0x7B, 0xFD, 0xBB, 0x2B, 0x40, 0xD0, 0x73, 0x05, 0x00, 0xC9, 0xD0, 0x0C,
                    0x30, 0x88, 0xD0, 0x05, 0xE0, 0x10, 0x2B, 0x20, 0xAB, 0x09, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE0, 0xA0, 0x01, 0x00, 0x0F, 0x10, 0xC0, 0x0E, 0x04,
                    0x60, 0x00, 0x00, 0x03, 0x08, 0x02, 0xE0, 0x0F, 0x70, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x01, 0x50, 0xB0, 0x09, 0x10, 0x3A, 0xC0, 0xFB, 0x40,
                    0x70, 0x43, 0x03, 0x01, 0x05, 0xBF, 0x20, 0x21, 0xEB, 0xF1, 0x34, 0x10,
                    0x0B, 0x0B, 0x6C, 0x5E, 0x80, 0x07, 0x0E, 0xC0, 0xAF, 0xA3, 0x92, 0x0F,
                    0xF2, 0xE2, 0x58, 0x03, 0x04, 0x0A, 0xE4, 0x70, 0xA0, 0x00, 0xF0, 0x80,
                    0xBC, 0xA9, 0x25, 0x0A, 0x30, 0x02, 0x80, 0x0E, 0x06, 0x48, 0x03, 0x0A,
                    0x2B, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x01, 0x33, 0x00, 0x00, 0x30,
                    0x04, 0x97, 0x00, 0x00, 0x09, 0xE9, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF0, 0x60, 0xD0, 0x8F, 0x3C, 0x2D, 0xC1, 0x06, 0x9D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x94, 0x0A, 0x92, 0x00, 0x06, 0x0F, 0x02, 0x0D,
                    0x00, 0x3F, 0x00, 0x50, 0x06, 0xBB, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0x00,
                    0x03, 0x06, 0x70, 0xD1, 0x22, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x00, 0x04, 0xFE, 0xB4, 0x07, 0xD0, 0x5E, 0xE6, 0x0D, 0x00,
                    0xD0, 0xF6, 0x80, 0xF0, 0xD1, 0x00, 0x0A, 0x30, 0xD1, 0xD0, 0x70, 0x8E,
                    0x70, 0x01, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_13, 13, expected_13, static4_13);

                var static2_14 = new byte[FingerprintConsts.SmallContextLength];
                expected_13.AsSpan().CopyTo(static2_14.AsSpan());
                var static4_14_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xF4, 0x1E, 0x77, 0xF1, 0xE9, 0x11, 0xC2, 0x21, 0x9E, 0x56, 0xDB, 0x4B,
                    0x76, 0x85, 0x29, 0xA8, 0x6A, 0x85, 0xB5, 0x83, 0xF4, 0x17, 0xDD, 0xEA,
                    0xD1, 0x63, 0xBC, 0x6C, 0xC1, 0x36, 0xE0, 0x59, 0xD9, 0x23, 0x07, 0xC9,
                    0x1A, 0xB5, 0xB3, 0x84, 0x8D, 0x0A, 0x3C, 0x5D, 0x33, 0xCD, 0xDC, 0x87,
                    0x8B, 0xC6, 0x72, 0xF6, 0x73, 0x1E, 0xEA, 0xC9, 0x85, 0x8D, 0xDE, 0xC8,
                    0x74, 0x58, 0xBE, 0x5B, 0x69, 0x7B, 0x01, 0x2E, 0x5E, 0xB5, 0xF2, 0xFF,
                    0xF3, 0x71, 0x5E, 0xF0, 0xF6, 0xF8, 0x5F, 0xC1, 0xD3, 0x1F, 0x0F, 0xBA,
                    0x39, 0x7F, 0xE3, 0xD9, 0x4D, 0x0B, 0x78, 0x67, 0x52, 0x8B, 0xF1, 0xC1,
                    0x4D, 0x11, 0xC9, 0xC3, 0x01, 0x3A, 0xC9, 0x8F, 0xC8, 0xAE, 0xA4, 0xAF,
                    0x30, 0xD0, 0xEB, 0x3B, 0x41, 0xBC, 0x61, 0xDF, 0x95, 0x88, 0x0F, 0x71,
                    0x15, 0xEE, 0xD7, 0x84, 0xD3, 0x32, 0x17, 0x0A, 0x93, 0x9A, 0x10, 0x18,
                    0xFB, 0xBD, 0xA6, 0xE0, 0xF1, 0x87, 0x4D, 0xC9, 0xAE, 0xBD, 0xBF, 0x93,
                    0x6E, 0xCD, 0xFB, 0x5B, 0x0A, 0x3A, 0xB1, 0x09, 0x92, 0xF9, 0x27, 0xEB,
                    0x10, 0x12, 0x82, 0x65, 0x69, 0x64, 0xCF, 0xEF, 0x70, 0x67, 0x1F, 0x56,
                    0x96, 0x44, 0x5A, 0x10, 0xFB, 0xBD, 0x1B, 0x93, 0x7D, 0x28, 0xFE, 0x36,
                    0x05, 0x87, 0x57, 0xAE, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_14 = MemoryMarshal.Cast<byte, uint>(static4_14_b.AsSpan()).ToArray();
                var expected_14 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xE0, 0xB0, 0xF3, 0xF9, 0x0F, 0xEA, 0x00, 0x80,
                    0x00, 0x09, 0xDD, 0x09, 0x80, 0xDD, 0xF0, 0x75, 0x05, 0x00, 0x3D, 0x39,
                    0x6A, 0xE1, 0x9B, 0x4B, 0xE0, 0x8A, 0x00, 0xA3, 0x03, 0xBC, 0xAE, 0x02,
                    0x7B, 0xFD, 0xBB, 0x2B, 0x40, 0xD0, 0x73, 0x05, 0x00, 0xC9, 0xD0, 0x0C,
                    0x34, 0x88, 0xD0, 0x05, 0xE0, 0x10, 0x2B, 0x20, 0xAB, 0x09, 0x43, 0xB5,
                    0x0B, 0xDA, 0x05, 0xE9, 0xA0, 0x01, 0x00, 0x9F, 0x10, 0xC0, 0x0E, 0x04,
                    0x62, 0x80, 0x00, 0x03, 0x08, 0x02, 0xE0, 0x0F, 0x70, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x01, 0x5D, 0xB0, 0x09, 0x16, 0x3A, 0xC0, 0xFB, 0x40,
                    0x70, 0x43, 0x03, 0x11, 0x05, 0xBF, 0x29, 0x21, 0xEB, 0xF1, 0x34, 0x10,
                    0x0B, 0xDB, 0x6C, 0x5E, 0x80, 0x07, 0x7E, 0xCA, 0xAF, 0xA3, 0x92, 0x0F,
                    0xF2, 0xE2, 0x58, 0x03, 0x04, 0x0A, 0xE4, 0x7F, 0xA0, 0x00, 0xF0, 0x80,
                    0xBC, 0xA9, 0x25, 0x0A, 0x30, 0x92, 0x86, 0x0E, 0x06, 0x48, 0x03, 0x0A,
                    0x2B, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x01, 0x33, 0x00, 0x00, 0x3E,
                    0x04, 0x97, 0x97, 0x00, 0x09, 0xE9, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF2, 0x6F, 0xD0, 0x8F, 0x3C, 0x2D, 0xC1, 0x06, 0x9D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x94, 0x0A, 0x92, 0x00, 0x06, 0x0F, 0x02, 0x0D,
                    0x00, 0x3F, 0x00, 0x50, 0xA6, 0xBB, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0x00,
                    0x03, 0x06, 0x70, 0xD1, 0x22, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x06, 0x04, 0xFE, 0xB4, 0x07, 0xD0, 0x5E, 0xE6, 0x0D, 0x00,
                    0xD1, 0xF6, 0x80, 0xF9, 0xD1, 0x00, 0x0A, 0x30, 0xD1, 0xD0, 0x78, 0x8E,
                    0x7F, 0x01, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_14, 14, expected_14, static4_14);

                var static2_15 = new byte[FingerprintConsts.SmallContextLength];
                expected_14.AsSpan().CopyTo(static2_15.AsSpan());
                var static4_15_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0x12, 0xBE, 0x02, 0xDB, 0xE9, 0x11, 0xC2, 0x21, 0x50, 0x50, 0xE6, 0x83,
                    0xFE, 0x18, 0x84, 0xF0, 0x6A, 0x85, 0xB5, 0x83, 0x5C, 0x5A, 0x1E, 0xBF,
                    0xD1, 0x63, 0xBC, 0x6C, 0xD9, 0x18, 0x0B, 0xD7, 0x70, 0xEA, 0x38, 0x83,
                    0x87, 0x2C, 0x56, 0x23, 0x82, 0x38, 0x00, 0x2D, 0x33, 0xCD, 0xDC, 0x87,
                    0xA4, 0x9D, 0x77, 0xC5, 0x73, 0x1E, 0xEA, 0xC9, 0x85, 0x8D, 0xDE, 0xC8,
                    0x74, 0x58, 0xBE, 0x5B, 0x63, 0x25, 0x5B, 0x6D, 0x5E, 0xB5, 0xF2, 0xFF,
                    0xF3, 0x71, 0x5E, 0xF0, 0x54, 0xF2, 0x5C, 0x8F, 0x65, 0x3F, 0x6F, 0x5D,
                    0x7B, 0x69, 0x99, 0x8B, 0x4D, 0x0B, 0x78, 0x67, 0x52, 0x8B, 0xF1, 0xC1,
                    0xEA, 0x7E, 0x95, 0xE0, 0xA1, 0x4A, 0x69, 0x6F, 0x04, 0xF6, 0x88, 0x48,
                    0x30, 0xD0, 0xEB, 0x3B, 0x41, 0xBC, 0x61, 0xDF, 0x20, 0xF0, 0xE7, 0x60,
                    0xF6, 0x7C, 0x39, 0x29, 0xD3, 0x32, 0x17, 0x0A, 0x93, 0x9A, 0x10, 0x18,
                    0x83, 0xD8, 0xA3, 0x90, 0xF1, 0x87, 0x4D, 0xC9, 0xAE, 0xBD, 0xBF, 0x93,
                    0x36, 0x93, 0x59, 0x1E, 0x0A, 0x3A, 0xB1, 0x09, 0xC7, 0x9B, 0xF1, 0x38,
                    0x10, 0x12, 0x82, 0x65, 0x69, 0x64, 0xCF, 0xEF, 0x70, 0x67, 0x1F, 0x56,
                    0x96, 0x44, 0x5A, 0x10, 0xFB, 0xBD, 0x1B, 0x93, 0xEA, 0xD5, 0x39, 0x89,
                    0x05, 0x87, 0x57, 0xAE, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_15 = MemoryMarshal.Cast<byte, uint>(static4_15_b.AsSpan()).ToArray();
                var expected_15 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xEA, 0xB0, 0xF3, 0xF9, 0x4F, 0xEA, 0x09, 0x80,
                    0x00, 0x09, 0xDD, 0x09, 0x84, 0xDD, 0xF0, 0x75, 0x05, 0x05, 0x3D, 0x39,
                    0x6A, 0xE1, 0x9B, 0x4B, 0xEC, 0x8A, 0x00, 0xA3, 0x03, 0xBC, 0xAE, 0x02,
                    0x7B, 0xFD, 0xBB, 0x2B, 0x40, 0xD0, 0x73, 0x05, 0x09, 0xC9, 0xD0, 0x0C,
                    0x34, 0x88, 0xD0, 0x05, 0xE7, 0x10, 0x2B, 0x20, 0xAB, 0x09, 0x43, 0xB5,
                    0x7B, 0xDA, 0x05, 0xE9, 0xA0, 0x01, 0x00, 0x9F, 0x10, 0xC0, 0x5E, 0x04,
                    0x62, 0x80, 0x00, 0x33, 0x08, 0x02, 0xE0, 0xBF, 0x70, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x01, 0x5D, 0xB0, 0x09, 0x16, 0x3A, 0xCB, 0xFB, 0x40,
                    0x7F, 0x43, 0x13, 0x11, 0x05, 0xBF, 0x29, 0x21, 0xEB, 0xF1, 0x34, 0x10,
                    0xFB, 0xDB, 0x6C, 0x5E, 0x80, 0x07, 0x7E, 0xCA, 0xAF, 0xA3, 0x92, 0x0F,
                    0xF2, 0xE2, 0x58, 0x03, 0x04, 0x7A, 0xE4, 0x7F, 0xA0, 0x03, 0xF7, 0x80,
                    0xBC, 0xA9, 0x25, 0xAA, 0x30, 0x92, 0x86, 0x0E, 0x06, 0x48, 0x03, 0x0A,
                    0x2B, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x91, 0x33, 0x00, 0x00, 0x3E,
                    0x04, 0x97, 0x97, 0x00, 0x09, 0xE9, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF2, 0x6F, 0xDD, 0x8F, 0x3C, 0x2D, 0xC1, 0xE6, 0x9D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x94, 0x0A, 0x92, 0x00, 0x06, 0x0F, 0x02, 0x0D,
                    0x00, 0x3F, 0x00, 0x58, 0xA6, 0xBB, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0xE0,
                    0x73, 0x06, 0x70, 0xD1, 0x22, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x06, 0xA4, 0xFE, 0xB4, 0x07, 0xD0, 0x5E, 0xE6, 0x2D, 0x00,
                    0xD1, 0xF6, 0x80, 0xF9, 0xD1, 0x01, 0x0A, 0x30, 0xD1, 0xD0, 0x78, 0x8E,
                    0x7F, 0x01, 0x1D, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_15, 15, expected_15, static4_15);

                var static2_16 = new byte[FingerprintConsts.SmallContextLength];
                expected_15.AsSpan().CopyTo(static2_16.AsSpan());
                var static4_16_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0x12, 0xBE, 0x02, 0xDB, 0xE9, 0x11, 0xC2, 0x21, 0x50, 0x50, 0xE6, 0x83,
                    0xFE, 0x18, 0x84, 0xF0, 0x6A, 0x85, 0xB5, 0x83, 0x5C, 0x5A, 0x1E, 0xBF,
                    0xD1, 0x63, 0xBC, 0x6C, 0xD9, 0x18, 0x0B, 0xD7, 0x24, 0x19, 0xE8, 0x93,
                    0xDF, 0x19, 0x5E, 0xCD, 0x82, 0x38, 0x00, 0x2D, 0x33, 0xCD, 0xDC, 0x87,
                    0xA4, 0x9D, 0x77, 0xC5, 0x8D, 0x16, 0xCA, 0xB9, 0x85, 0x8D, 0xDE, 0xC8,
                    0x74, 0x58, 0xBE, 0x5B, 0x63, 0x25, 0x5B, 0x6D, 0x5E, 0xB5, 0xF2, 0xFF,
                    0xF3, 0x71, 0x5E, 0xF0, 0x54, 0xF2, 0x5C, 0x8F, 0x65, 0x3F, 0x6F, 0x5D,
                    0x1E, 0xB5, 0xE5, 0x3C, 0x4D, 0x0B, 0x78, 0x67, 0x52, 0x8B, 0xF1, 0xC1,
                    0xEA, 0x7E, 0x95, 0xE0, 0xA1, 0x4A, 0x69, 0x6F, 0x04, 0xF6, 0x88, 0x48,
                    0x30, 0xD0, 0xEB, 0x3B, 0x41, 0xBC, 0x61, 0xDF, 0x20, 0xF0, 0xE7, 0x60,
                    0xF6, 0x7C, 0x39, 0x29, 0xD3, 0x32, 0x17, 0x0A, 0x93, 0x9A, 0x10, 0x18,
                    0x83, 0xD8, 0xA3, 0x90, 0xF1, 0x87, 0x4D, 0xC9, 0xAE, 0xBD, 0xBF, 0x93,
                    0x36, 0x93, 0x59, 0x1E, 0x79, 0xE2, 0x74, 0x0D, 0x87, 0x30, 0xB7, 0x80,
                    0x5A, 0x80, 0xF4, 0x11, 0x69, 0x64, 0xCF, 0xEF, 0xBB, 0x71, 0xA2, 0xB1,
                    0x96, 0x44, 0x5A, 0x10, 0xFB, 0xBD, 0x1B, 0x93, 0xEA, 0xD5, 0x39, 0x89,
                    0x05, 0x87, 0x57, 0xAE, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_16 = MemoryMarshal.Cast<byte, uint>(static4_16_b.AsSpan()).ToArray();
                var expected_16 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xEA, 0xB0, 0xF3, 0xF9, 0x4F, 0xEA, 0x09, 0x80,
                    0x00, 0x09, 0xDD, 0xB9, 0x84, 0xDD, 0xF0, 0x75, 0x05, 0x05, 0x3D, 0x39,
                    0x6A, 0xE1, 0x9B, 0x4B, 0xEC, 0x8A, 0xE0, 0xA3, 0x23, 0xBC, 0xAE, 0x02,
                    0x7B, 0xFD, 0xBB, 0x2B, 0x40, 0xD0, 0x73, 0x05, 0x09, 0xC9, 0xD0, 0x0C,
                    0x34, 0x88, 0xD0, 0x05, 0xE7, 0x10, 0x2B, 0x20, 0xAB, 0x09, 0x43, 0xB5,
                    0x7B, 0xDA, 0x05, 0xE9, 0xA0, 0x01, 0x50, 0x9F, 0x10, 0xC0, 0x5E, 0x04,
                    0x62, 0x87, 0x00, 0x33, 0x08, 0x02, 0xE0, 0xBF, 0x72, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x81, 0x5D, 0xB0, 0x09, 0x16, 0x3A, 0xCB, 0xFB, 0x40,
                    0x7F, 0x43, 0x13, 0x11, 0xF5, 0xBF, 0x29, 0x21, 0xEB, 0xF1, 0x34, 0x10,
                    0xFB, 0xDB, 0x6C, 0x5E, 0x80, 0x07, 0x7E, 0xCA, 0xAF, 0xA3, 0x92, 0x9F,
                    0xF2, 0xE2, 0x58, 0x03, 0x74, 0x7A, 0xE4, 0x7F, 0xA0, 0x03, 0xF7, 0x80,
                    0xBC, 0xA9, 0x25, 0xAA, 0x30, 0x92, 0x86, 0x0E, 0x06, 0x48, 0x03, 0x0A,
                    0x2B, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x91, 0x33, 0x00, 0x0F, 0x3E,
                    0x84, 0x97, 0x97, 0x00, 0x09, 0xE9, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF2, 0x6F, 0xDD, 0x8F, 0x3C, 0x2D, 0xC1, 0xE6, 0x9D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x94, 0x0A, 0x92, 0x00, 0x06, 0x0F, 0x02, 0x0D,
                    0x00, 0x3F, 0x00, 0x58, 0xA6, 0xBB, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0xE0,
                    0x73, 0x06, 0x70, 0xD1, 0x22, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x06, 0xA4, 0xFE, 0xB4, 0x07, 0xD0, 0x5E, 0xE6, 0x2D, 0x0E,
                    0xD1, 0xF6, 0x80, 0xF9, 0xD1, 0x01, 0xAA, 0x30, 0xD1, 0xD0, 0x78, 0x8E,
                    0x7F, 0x01, 0x1D, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_16, 16, expected_16, static4_16);

                var static2_17 = new byte[FingerprintConsts.SmallContextLength];
                expected_16.AsSpan().CopyTo(static2_17.AsSpan());
                var static4_17_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xBA, 0x8C, 0x41, 0xAE, 0x61, 0xC6, 0x86, 0x81, 0xA8, 0x40, 0x44, 0xE2,
                    0xFE, 0x18, 0x84, 0xF0, 0x6A, 0x85, 0xB5, 0x83, 0x5C, 0x5A, 0x1E, 0xBF,
                    0xD1, 0x63, 0xBC, 0x6C, 0xD9, 0x18, 0x0B, 0xD7, 0x24, 0x19, 0xE8, 0x93,
                    0xDF, 0x19, 0x5E, 0xCD, 0x6F, 0x32, 0x61, 0x0E, 0xFA, 0x12, 0x76, 0xA7,
                    0xA4, 0x9D, 0x77, 0xC5, 0x99, 0xB3, 0x3F, 0x01, 0x1F, 0x44, 0x8C, 0xC9,
                    0x74, 0x58, 0xBE, 0x5B, 0xE9, 0x79, 0x7A, 0x9B, 0x5E, 0xB5, 0xF2, 0xFF,
                    0x3C, 0x4F, 0xB0, 0x37, 0xBC, 0xBB, 0xD0, 0xBE, 0x65, 0x3F, 0x6F, 0x5D,
                    0xCC, 0xE3, 0xE4, 0x39, 0xDE, 0x29, 0x96, 0xB8, 0x3E, 0x47, 0x2E, 0xB8,
                    0x4E, 0x86, 0xA1, 0x4E, 0xA1, 0x4A, 0x69, 0x6F, 0x04, 0xF6, 0x88, 0x48,
                    0x30, 0xD0, 0xEB, 0x3B, 0x41, 0xBC, 0x61, 0xDF, 0x20, 0xF0, 0xE7, 0x60,
                    0x86, 0x71, 0xF1, 0x73, 0xD3, 0x32, 0x17, 0x0A, 0x47, 0x4A, 0x0C, 0x8F,
                    0x83, 0xD8, 0xA3, 0x90, 0xF1, 0x87, 0x4D, 0xC9, 0xAE, 0xBD, 0xBF, 0x93,
                    0x36, 0x93, 0x59, 0x1E, 0x79, 0xE2, 0x74, 0x0D, 0x87, 0x30, 0xB7, 0x80,
                    0x5A, 0x80, 0xF4, 0x11, 0x75, 0x51, 0xE6, 0x5E, 0xBB, 0x71, 0xA2, 0xB1,
                    0x96, 0x44, 0x5A, 0x10, 0x56, 0x86, 0x28, 0xFC, 0xEA, 0xD5, 0x39, 0x89,
                    0x7C, 0xF5, 0x0D, 0x95, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_17 = MemoryMarshal.Cast<byte, uint>(static4_17_b.AsSpan()).ToArray();
                var expected_17 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xEA, 0xB0, 0xF3, 0xF9, 0x4F, 0xEA, 0x09, 0x80,
                    0x00, 0x09, 0xDD, 0xB9, 0x84, 0xDD, 0xF0, 0x75, 0x05, 0x05, 0x3D, 0x39,
                    0x6A, 0xE1, 0x9B, 0x4B, 0xEC, 0x8A, 0xE0, 0xA3, 0x23, 0xBC, 0xAE, 0x02,
                    0x7B, 0xFD, 0xBB, 0x2B, 0x40, 0xD0, 0x73, 0xB5, 0x09, 0xC9, 0xD0, 0x0C,
                    0x34, 0x88, 0xD0, 0x05, 0xE7, 0x18, 0x2B, 0x20, 0xAB, 0x09, 0x43, 0xB5,
                    0x7B, 0xDA, 0x05, 0xE9, 0xA6, 0x01, 0x50, 0x9F, 0x10, 0xC2, 0x5E, 0x04,
                    0x62, 0x87, 0x30, 0x33, 0x08, 0x02, 0xE0, 0xBF, 0x72, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x81, 0x5D, 0xB0, 0x09, 0x16, 0x3A, 0xCB, 0xFB, 0x40,
                    0x7F, 0x43, 0x13, 0x11, 0xF5, 0xBF, 0x29, 0x21, 0xEB, 0xF1, 0x34, 0x10,
                    0xFB, 0xDB, 0x6C, 0x5E, 0x80, 0x07, 0x7E, 0xCA, 0xAF, 0xA3, 0x92, 0x9F,
                    0xF2, 0xE2, 0x58, 0x93, 0x74, 0x7A, 0xE4, 0x7F, 0xA0, 0x03, 0xF7, 0x80,
                    0xBC, 0xA9, 0x25, 0xAA, 0x30, 0x92, 0x86, 0x0E, 0x06, 0x48, 0x23, 0x8A,
                    0x2B, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x91, 0x33, 0x00, 0x0F, 0x3E,
                    0x84, 0x97, 0x97, 0x10, 0x09, 0xE9, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF2, 0x6F, 0xDD, 0x8F, 0x3C, 0x2D, 0xC1, 0xE6, 0x9D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x94, 0x0A, 0x92, 0x00, 0x06, 0x0F, 0x02, 0x0D,
                    0x00, 0x3F, 0x00, 0x58, 0xA6, 0xBB, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0xE0,
                    0x73, 0x06, 0x70, 0xD1, 0x22, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x0E,
                    0xE2, 0x0F, 0x66, 0xA4, 0xFE, 0xB4, 0x47, 0xD0, 0x5E, 0xE6, 0x2D, 0x0E,
                    0xD1, 0xF6, 0x80, 0xF9, 0xD1, 0x01, 0xAA, 0x30, 0xD1, 0xD0, 0x78, 0x8E,
                    0x7F, 0x01, 0x1D, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_17, 17, expected_17, static4_17);

                var static2_18 = new byte[FingerprintConsts.SmallContextLength];
                expected_17.AsSpan().CopyTo(static2_18.AsSpan());
                var static4_18_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xBA, 0x8C, 0x41, 0xAE, 0x61, 0xC6, 0x86, 0x81, 0xA8, 0x40, 0x44, 0xE2,
                    0xCB, 0x2A, 0xE0, 0x15, 0x6A, 0x85, 0xB5, 0x83, 0x5C, 0x5A, 0x1E, 0xBF,
                    0xD1, 0x63, 0xBC, 0x6C, 0xD9, 0x18, 0x0B, 0xD7, 0x24, 0x19, 0xE8, 0x93,
                    0xDF, 0x19, 0x5E, 0xCD, 0x6F, 0x32, 0x61, 0x0E, 0xF3, 0x9D, 0x13, 0x7C,
                    0xA4, 0x9D, 0x77, 0xC5, 0x99, 0xB3, 0x3F, 0x01, 0x1F, 0x44, 0x8C, 0xC9,
                    0x74, 0x58, 0xBE, 0x5B, 0xE9, 0x79, 0x7A, 0x9B, 0x5E, 0xB5, 0xF2, 0xFF,
                    0x3C, 0x4F, 0xB0, 0x37, 0xBC, 0xBB, 0xD0, 0xBE, 0xB0, 0x77, 0x63, 0xE6,
                    0xCC, 0xE3, 0xE4, 0x39, 0x34, 0xDC, 0x04, 0xD3, 0x3E, 0x47, 0x2E, 0xB8,
                    0x4E, 0x86, 0xA1, 0x4E, 0xA1, 0x4A, 0x69, 0x6F, 0x04, 0xF6, 0x88, 0x48,
                    0x30, 0xD0, 0xEB, 0x3B, 0x41, 0xBC, 0x61, 0xDF, 0x20, 0xF0, 0xE7, 0x60,
                    0x86, 0x71, 0xF1, 0x73, 0xD3, 0x32, 0x17, 0x0A, 0x47, 0x4A, 0x0C, 0x8F,
                    0x83, 0xD8, 0xA3, 0x90, 0xF1, 0x87, 0x4D, 0xC9, 0xAE, 0xBD, 0xBF, 0x93,
                    0x36, 0x93, 0x59, 0x1E, 0x79, 0xE2, 0x74, 0x0D, 0xED, 0xE0, 0xD7, 0x1E,
                    0x5A, 0x80, 0xF4, 0x11, 0x75, 0x51, 0xE6, 0x5E, 0xBB, 0x71, 0xA2, 0xB1,
                    0x96, 0x44, 0x5A, 0x10, 0x56, 0x86, 0x28, 0xFC, 0xEA, 0xD5, 0x39, 0x89,
                    0x7C, 0xF5, 0x0D, 0x95, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_18 = MemoryMarshal.Cast<byte, uint>(static4_18_b.AsSpan()).ToArray();
                var expected_18 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xEA, 0xB0, 0xF3, 0xF9, 0x4F, 0xEA, 0x09, 0x80,
                    0x00, 0x09, 0xDD, 0xB9, 0x84, 0xDD, 0xF0, 0x75, 0xC5, 0x05, 0x3D, 0x39,
                    0x6A, 0xE1, 0x9B, 0x4B, 0xEC, 0x8A, 0xE0, 0xA3, 0x23, 0xBC, 0xAE, 0xD2,
                    0x7B, 0xFD, 0xBB, 0x2B, 0x40, 0xD0, 0x73, 0xB5, 0x09, 0xC9, 0xD0, 0x0C,
                    0x34, 0x88, 0xD5, 0x05, 0xE7, 0x18, 0x2B, 0x20, 0xAB, 0x09, 0x43, 0xB5,
                    0x7B, 0xDA, 0x05, 0xE9, 0xA6, 0x01, 0x50, 0x9F, 0x10, 0xC2, 0x5E, 0x04,
                    0x62, 0x87, 0x30, 0x33, 0x68, 0x02, 0xE5, 0xBF, 0x72, 0x50, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x81, 0x5D, 0xB4, 0x09, 0x16, 0x3A, 0xCB, 0xFB, 0x40,
                    0x7F, 0x43, 0x13, 0x11, 0xF5, 0xBF, 0x29, 0x21, 0xEB, 0xF1, 0x34, 0x10,
                    0xFB, 0xDB, 0x6C, 0x5E, 0x86, 0xC7, 0x7E, 0xCA, 0xAF, 0xA3, 0x92, 0x9F,
                    0xF2, 0xE2, 0x58, 0x93, 0x74, 0x7A, 0xE4, 0x7F, 0xA0, 0x03, 0xF7, 0x80,
                    0xBC, 0xA9, 0x25, 0xAA, 0x30, 0x92, 0x86, 0x0E, 0x06, 0x48, 0x23, 0x8A,
                    0x2B, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x91, 0x33, 0x00, 0x0F, 0x3E,
                    0x84, 0x97, 0x97, 0x1A, 0x09, 0xE9, 0xC1, 0x1F, 0x07, 0xE0, 0x75, 0xB2,
                    0xF2, 0x6F, 0xDD, 0x8F, 0x3C, 0x2D, 0xC1, 0xE6, 0x9D, 0x05, 0x95, 0x09,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x94, 0x0A, 0x92, 0x0B, 0x06, 0x0F, 0x02, 0x0D,
                    0x0E, 0x3F, 0xAC, 0x58, 0xA6, 0xBB, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0xE0,
                    0x73, 0x06, 0x7F, 0xD1, 0x22, 0x33, 0x9D, 0x4A, 0x0C, 0x44, 0xD0, 0x2E,
                    0xE2, 0x0F, 0x66, 0xA4, 0xFE, 0xB4, 0x47, 0xD0, 0x5E, 0xE6, 0x2D, 0x0E,
                    0xD1, 0xF6, 0x80, 0xF9, 0xD1, 0x01, 0xAA, 0x30, 0xD1, 0xD8, 0x78, 0x8E,
                    0x7F, 0x01, 0x1D, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_18, 18, expected_18, static4_18);

                var static2_19 = new byte[FingerprintConsts.SmallContextLength];
                expected_18.AsSpan().CopyTo(static2_19.AsSpan());
                var static4_19_b = new byte[FingerprintConsts.BigContextLengthDword * 4] {
                    0xBA, 0x8C, 0x41, 0xAE, 0x9B, 0x4D, 0x4A, 0x1B, 0xA8, 0x40, 0x44, 0xE2,
                    0xCB, 0x2A, 0xE0, 0x15, 0x6A, 0x85, 0xB5, 0x83, 0xF1, 0x60, 0x91, 0x9A,
                    0xD1, 0x63, 0xBC, 0x6C, 0x11, 0x9E, 0xAC, 0xC3, 0xEC, 0xC8, 0x12, 0xF5,
                    0xDF, 0x19, 0x5E, 0xCD, 0x6F, 0x32, 0x61, 0x0E, 0xF3, 0x9D, 0x13, 0x7C,
                    0x25, 0x88, 0x1D, 0xF5, 0x99, 0xB3, 0x3F, 0x01, 0x1F, 0x44, 0x8C, 0xC9,
                    0x74, 0x58, 0xBE, 0x5B, 0xE9, 0x79, 0x7A, 0x9B, 0x7E, 0xE5, 0x5E, 0x62,
                    0x3C, 0x4F, 0xB0, 0x37, 0xBC, 0xBB, 0xD0, 0xBE, 0xF0, 0x46, 0x50, 0x21,
                    0xCC, 0xE3, 0xE4, 0x39, 0x34, 0xDC, 0x04, 0xD3, 0x3E, 0x47, 0x2E, 0xB8,
                    0x4E, 0x86, 0xA1, 0x4E, 0xA1, 0x4A, 0x69, 0x6F, 0x04, 0xF6, 0x88, 0x48,
                    0x30, 0xD0, 0xEB, 0x3B, 0xED, 0x9E, 0x05, 0x26, 0x94, 0x20, 0x5C, 0x1A,
                    0x86, 0x71, 0xF1, 0x73, 0xD3, 0x32, 0x17, 0x0A, 0x47, 0x4A, 0x0C, 0x8F,
                    0xE9, 0x16, 0x26, 0xCD, 0x47, 0x8F, 0x34, 0x0F, 0x98, 0x45, 0xF7, 0x93,
                    0x36, 0x93, 0x59, 0x1E, 0x79, 0xE2, 0x74, 0x0D, 0xCD, 0x88, 0xA7, 0x8B,
                    0x5A, 0x80, 0xF4, 0x11, 0x23, 0x59, 0xE1, 0x34, 0xBB, 0x71, 0xA2, 0xB1,
                    0x96, 0x44, 0x5A, 0x10, 0x72, 0xCB, 0x47, 0x13, 0x03, 0x81, 0xB1, 0x12,
                    0xB7, 0xFC, 0x24, 0x2E, 0x03, 0x7F, 0xF4, 0xF3,
};
                var static4_19 = MemoryMarshal.Cast<byte, uint>(static4_19_b.AsSpan()).ToArray();
                var expected_19 = new byte[FingerprintConsts.SmallContextLength]
                {
                    0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                    0xB5, 0x01, 0x2C, 0xC5, 0xEA, 0xB0, 0xF3, 0xF9, 0x4F, 0xEA, 0x49, 0x80,
                    0x00, 0x09, 0xDD, 0xB9, 0x84, 0xDD, 0xF4, 0x75, 0xC5, 0xB5, 0x3D, 0x39,
                    0x6A, 0xE1, 0x9B, 0x4B, 0xEC, 0x8A, 0xE4, 0xA3, 0x23, 0xBC, 0xAE, 0xD2,
                    0x7B, 0xFD, 0xBB, 0x2B, 0x40, 0xD7, 0x73, 0xB5, 0x39, 0xC9, 0xD5, 0x3C,
                    0x34, 0x88, 0xD5, 0x95, 0xE7, 0x18, 0x2B, 0x20, 0xAB, 0x99, 0x43, 0xB5,
                    0x7B, 0xDA, 0x45, 0xE9, 0xA6, 0x01, 0x53, 0x9F, 0x10, 0xC2, 0x5E, 0xC4,
                    0x62, 0x87, 0x31, 0x33, 0x68, 0xE2, 0xE5, 0xBF, 0x72, 0x5E, 0xC2, 0xB0,
                    0x42, 0x4A, 0xF0, 0x81, 0x5D, 0xB4, 0x09, 0x16, 0x3A, 0xCB, 0xFB, 0x40,
                    0x7F, 0x43, 0x13, 0x11, 0xF5, 0xBF, 0x29, 0x21, 0xEB, 0xF1, 0x34, 0x1C,
                    0xFB, 0xDB, 0x6C, 0x5E, 0x86, 0xC7, 0x7E, 0xCA, 0xAF, 0xA3, 0x92, 0x9F,
                    0xF2, 0xE2, 0x58, 0x93, 0x74, 0x7A, 0xE4, 0x7F, 0xA0, 0x03, 0xF7, 0x80,
                    0xBC, 0xA9, 0x25, 0xAA, 0x30, 0x92, 0x86, 0x0E, 0xD6, 0x48, 0x23, 0x8A,
                    0x2B, 0xC5, 0xD0, 0xD1, 0xB2, 0xD6, 0x22, 0x91, 0x33, 0x9B, 0x0F, 0x3E,
                    0x84, 0x97, 0x97, 0x1A, 0xD9, 0xE9, 0xC1, 0x1F, 0x07, 0xE6, 0x75, 0xB2,
                    0xF2, 0x6F, 0xDD, 0x8F, 0x3C, 0x2D, 0xC1, 0xE6, 0x9D, 0x85, 0x95, 0xC9,
                    0x7D, 0x0D, 0x7E, 0x9C, 0x94, 0x6A, 0x92, 0x2B, 0x46, 0x0F, 0x02, 0x0D,
                    0xAE, 0x3F, 0xAC, 0x58, 0xA6, 0xBB, 0x6C, 0x59, 0x45, 0x04, 0xE9, 0xE1,
                    0x73, 0x06, 0x7F, 0xD1, 0x22, 0x33, 0x9D, 0x4A, 0x2C, 0x44, 0xDA, 0x2E,
                    0xE2, 0x6F, 0x66, 0xA4, 0xFE, 0xB4, 0x47, 0xD9, 0x5E, 0xE6, 0x2D, 0x0E,
                    0xD1, 0xF6, 0x86, 0xF9, 0xD1, 0x81, 0xAA, 0x3F, 0xD1, 0xD8, 0x78, 0x8E,
                    0x7F, 0x01, 0x1D, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                };
                yield return new TestCaseData(static2_19, 19, expected_19, static4_19);
            }
        }
    
    [Test]
    [TestCaseSource(nameof(FingerprintSubProcedureCases))]
    public void FingerprintSubProcedureTest(byte[] smallContext, int index, byte[] expected, uint[] bigContext)
    {
        HarpoFingerprint.FingerprintSubProcedure(
            FingerprintConsts.Data1Collection[index],
            FingerprintConsts.XorMagic[index],
            FingerprintConsts.Data2Collection[index],
            smallContext,
            bigContext
            );

        Assert.That(expected.SequenceEqual(smallContext));
    }

    [Test]
    public void FingerprintChallenge()
    {
        Span<byte> fingerprint = new byte[8];
        ReadOnlySpan<byte> challenge = new byte[20] { 184, 13, 177, 179, 217, 72, 76, 110, 66, 64, 64, 63, 99, 198, 181, 1, 44, 197, 46, 127 };

        HarpoFingerprint.FingerprintChallenge(fingerprint, challenge);

        var expectedFingerprint = new byte[8] { 0xe2, 0x87, 0xc1, 0xcb, 0x65, 0x9b, 0x9e, 0xdf }.AsSpan();
        Assert.That(expectedFingerprint.SequenceEqual(fingerprint));
    }
}