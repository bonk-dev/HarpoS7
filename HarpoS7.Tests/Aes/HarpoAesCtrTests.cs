using System.Buffers;
using System.Reflection;
using HarpoS7.Aes;

namespace HarpoS7.Tests.Aes;

public class HarpoAesCtrTests
{
    private readonly byte[] _key = {
            0x4E, 0x00, 0x10, 0x16, 0xDB, 0x62, 0x5D, 0xCC, 0xE9, 0x10, 0x5B, 0xDC,
            0xD8, 0xA1, 0xB4, 0x2C
        };

        private static readonly byte[] _mockChecksumLut = new byte[4096] {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xB1, 0x61, 0xC3, 0x6E, 0x3D, 0xCB, 0xD2, 0x3B,
            0xBD, 0x0A, 0x0B, 0xF1, 0x57, 0x02, 0x94, 0x48, 0xA0, 0xC3, 0x86, 0xDC,
            0x7B, 0x97, 0xA4, 0x77, 0x7A, 0x14, 0x17, 0xE2, 0xAE, 0x05, 0x28, 0x91,
            0x11, 0xA2, 0x45, 0xB2, 0x46, 0x5C, 0x76, 0x4C, 0xC7, 0x1E, 0x1C, 0x13,
            0xF9, 0x07, 0xBC, 0xD9, 0x83, 0x87, 0x0D, 0xB8, 0xF7, 0x2F, 0x48, 0xEE,
            0xF4, 0x28, 0x2F, 0xC5, 0x5C, 0x0A, 0x51, 0x23, 0x32, 0xE6, 0xCE, 0xD6,
            0xCA, 0xE4, 0x9A, 0xD5, 0x49, 0x22, 0x24, 0x34, 0x0B, 0x08, 0xC5, 0x6B,
            0x23, 0x44, 0x8B, 0x64, 0x8C, 0xB8, 0xEC, 0x99, 0x8E, 0x3C, 0x38, 0x27,
            0xF2, 0x0F, 0x79, 0xB2, 0x92, 0x25, 0x48, 0x0A, 0xB1, 0x73, 0x3E, 0xA2,
            0x33, 0x36, 0x33, 0xD6, 0xA5, 0x0D, 0xED, 0xFA, 0xC5, 0x0E, 0x1B, 0x71,
            0xEE, 0x5E, 0x91, 0xDD, 0xE8, 0x50, 0x5F, 0x8A, 0xB8, 0x14, 0xA2, 0x47,
            0x74, 0x6F, 0xD8, 0x1F, 0xD3, 0x95, 0x43, 0xE6, 0x55, 0x5A, 0x54, 0x7B,
            0xEF, 0x16, 0x36, 0x0F, 0x65, 0xCD, 0x9D, 0xAD, 0x95, 0xC9, 0x35, 0xAA,
            0x92, 0x44, 0x48, 0x68, 0x16, 0x11, 0x8A, 0xD6, 0xD4, 0xAC, 0x5E, 0xC3,
            0xA8, 0x02, 0xE7, 0x91, 0x2F, 0x4E, 0x43, 0x99, 0x41, 0x13, 0x1E, 0x9E,
            0x46, 0x89, 0x16, 0xC9, 0x19, 0x71, 0xD9, 0x33, 0x1C, 0x78, 0x70, 0x4F,
            0xE4, 0x1E, 0xF3, 0x64, 0xF7, 0xE8, 0xD5, 0xA7, 0x24, 0xBA, 0x0B, 0x08,
            0xA1, 0x72, 0x7B, 0xBE, 0xB3, 0x1C, 0x67, 0x2C, 0xE6, 0x4A, 0x90, 0x15,
            0x62, 0xE6, 0x7D, 0x44, 0x66, 0x6C, 0x67, 0xAD, 0x4A, 0x1B, 0xDB, 0xF5,
            0x57, 0x2B, 0x53, 0x7B, 0x5F, 0x2D, 0xAF, 0x7F, 0xDB, 0x66, 0x6C, 0x5C,
            0x1D, 0x19, 0x4F, 0xBD, 0x48, 0x1C, 0x36, 0xE3, 0xDC, 0xBD, 0x23, 0xBB,
            0xD0, 0xA0, 0xBF, 0x15, 0x70, 0x29, 0x44, 0x8F, 0xF9, 0x7D, 0xF5, 0x8D,
            0xE1, 0x76, 0xF1, 0x80, 0x6D, 0xAA, 0xB4, 0xE4, 0x27, 0x2B, 0xD0, 0xC7,
            0xE8, 0xDF, 0xB0, 0x3F, 0xA7, 0x2A, 0x87, 0xCC, 0xAA, 0xB4, 0xA8, 0xF7,
            0xDE, 0x2C, 0x6C, 0x1E, 0x59, 0xBE, 0x73, 0x51, 0x9A, 0xE1, 0x55, 0xF7,
            0x17, 0xBE, 0xA3, 0x06, 0x89, 0x2E, 0xF8, 0x56, 0xCB, 0x9B, 0x3B, 0x5B,
            0x2B, 0x92, 0x6B, 0x55, 0x24, 0x88, 0x90, 0xD0, 0x2C, 0x23, 0x15, 0xAC,
            0x7A, 0xFA, 0xF8, 0x35, 0x16, 0x59, 0xB9, 0x6E, 0x99, 0x82, 0x9B, 0x21,
            0x7B, 0x21, 0x81, 0xE4, 0x6B, 0x58, 0xBD, 0x87, 0x50, 0x05, 0xCF, 0x22,
            0x5E, 0x9C, 0x87, 0x32, 0x82, 0x26, 0x3D, 0x3D, 0xDA, 0x39, 0x7E, 0xE9,
            0x6D, 0xCE, 0x1D, 0x19, 0xE3, 0x96, 0x8C, 0xC3, 0xD5, 0x24, 0xA9, 0x75,
            0x8D, 0x12, 0x2D, 0x92, 0x32, 0xE3, 0xB2, 0x66, 0x38, 0xF0, 0xE0, 0x9F,
            0xC8, 0x3D, 0xE6, 0xC8, 0x3C, 0x73, 0xEE, 0xFC, 0x0F, 0x28, 0x60, 0x5D,
            0x85, 0xFA, 0xEB, 0x6E, 0x9F, 0x3F, 0x72, 0x80, 0x2D, 0xD1, 0xAB, 0x4E,
            0x49, 0x74, 0x16, 0x11, 0x42, 0xE4, 0xF7, 0x7D, 0x66, 0x38, 0xCE, 0x59,
            0x9C, 0xB0, 0x68, 0x20, 0x74, 0xBF, 0xC4, 0x2A, 0xFF, 0xEE, 0xFC, 0x8C,
            0x31, 0x3A, 0x5A, 0x11, 0x0E, 0x95, 0x20, 0x2A, 0xC5, 0xCC, 0xFA, 0x88,
            0xCC, 0xD8, 0xCF, 0x5A, 0x94, 0x37, 0xB7, 0xEB, 0xBF, 0xF4, 0xE3, 0x44,
            0xF8, 0x07, 0x28, 0xB3, 0x71, 0xD2, 0xC4, 0xAB, 0xC3, 0x35, 0x23, 0xA3,
            0xAE, 0x56, 0xA6, 0xF6, 0xBE, 0x5B, 0x5E, 0xFF, 0xB6, 0xCC, 0xD8, 0xB8,
            0x3A, 0x32, 0x9F, 0x7A, 0x1F, 0x37, 0x65, 0x98, 0x83, 0x90, 0x8C, 0xC4,
            0x0B, 0xC6, 0xD3, 0x49, 0x6D, 0x30, 0x0B, 0x32, 0x90, 0x38, 0x6D, 0xC7,
            0xB9, 0x7A, 0x47, 0x77, 0xA1, 0x41, 0x7E, 0x2A, 0xE0, 0x52, 0x89, 0x1E,
            0x21, 0x59, 0xAE, 0xA9, 0x84, 0xB1, 0x95, 0x4C, 0x1C, 0x4B, 0x75, 0xDB,
            0xB7, 0x50, 0x1D, 0x56, 0x30, 0xFB, 0xEB, 0x1B, 0xC2, 0xED, 0xE3, 0x00,
            0xDB, 0x55, 0x69, 0xC8, 0x4E, 0x57, 0xA1, 0x8F, 0x81, 0x9A, 0x28, 0x75,
            0xFF, 0x26, 0x31, 0x3B, 0x66, 0x5F, 0x62, 0x39, 0x19, 0x55, 0x35, 0xC7,
            0x13, 0xBF, 0x60, 0x7F, 0x4E, 0x55, 0x0F, 0x99, 0x55, 0x69, 0x51, 0xEF,
            0xBC, 0x58, 0xD8, 0x3D, 0xA2, 0xDE, 0xA3, 0x11, 0x73, 0x9E, 0xDD, 0xA2,
            0xE8, 0x63, 0x5A, 0x1E, 0xEB, 0x5A, 0x4C, 0x75, 0xB3, 0x7C, 0xE6, 0xA3,
            0x35, 0xC2, 0xAB, 0xEE, 0x2F, 0x7D, 0x46, 0x0D, 0x12, 0x5D, 0xF0, 0xAC,
            0x02, 0x1D, 0x25, 0xCD, 0x08, 0x09, 0x79, 0xD5, 0x92, 0x77, 0x4D, 0xFC,
            0x45, 0x5F, 0x64, 0xE4, 0x55, 0x36, 0x76, 0xB6, 0x57, 0x24, 0xD6, 0xAA,
            0x49, 0x11, 0x21, 0xA0, 0x58, 0x46, 0x2B, 0x59, 0xE4, 0x57, 0xB5, 0xD8,
            0x6A, 0xEF, 0x04, 0x91, 0xF4, 0x1B, 0x2A, 0x51, 0x0F, 0x44, 0xBF, 0x11,
            0xF5, 0xF5, 0xF0, 0x6A, 0x2C, 0xB3, 0x72, 0xDD, 0x33, 0x05, 0x36, 0x42,
            0xF6, 0x43, 0x03, 0xC8, 0x44, 0x94, 0x33, 0x04, 0x11, 0x78, 0xA0, 0xE6,
            0x8E, 0x0F, 0x3D, 0xB3, 0xA1, 0x41, 0x97, 0x80, 0xD6, 0xB1, 0x7B, 0x0E,
            0xA0, 0x0B, 0x9E, 0x44, 0xBD, 0x39, 0x0E, 0x65, 0x04, 0x4C, 0x7A, 0x7A,
            0x67, 0xD0, 0xB8, 0x60, 0x9D, 0xC0, 0x4C, 0x7F, 0x00, 0x33, 0x05, 0x94,
            0x53, 0x4E, 0xEE, 0x32, 0x76, 0x72, 0xFD, 0xD2, 0xDB, 0x9C, 0x3A, 0x33,
            0xC7, 0x2D, 0x19, 0x87, 0xAA, 0x49, 0x52, 0xEB, 0xC7, 0x13, 0x3E, 0xBC,
            0xE6, 0x57, 0xE8, 0x08, 0x7A, 0x27, 0x12, 0x76, 0xFD, 0x4B, 0xC6, 0xA3,
            0xD8, 0x24, 0x5B, 0x24, 0x65, 0xC7, 0x64, 0xCC, 0x71, 0xE1, 0xC1, 0x3F,
            0x90, 0x7B, 0xCD, 0x91, 0x69, 0x45, 0x98, 0x4A, 0x58, 0x0C, 0xB6, 0xF7,
            0xCC, 0xEB, 0xCA, 0xCE, 0xC7, 0x79, 0x59, 0xD9, 0x78, 0xE7, 0xDD, 0xF8,
            0x1E, 0x50, 0xC0, 0xBB, 0x0B, 0xF5, 0xD6, 0xDD, 0x3E, 0x7E, 0xE5, 0x00,
            0xC9, 0x86, 0x1E, 0x96, 0x23, 0x9B, 0x12, 0x80, 0xB6, 0xFF, 0xDD, 0x2C,
            0x69, 0x7C, 0x71, 0x48, 0x5B, 0xA3, 0x56, 0x9C, 0x92, 0xE8, 0x2C, 0x22,
            0x85, 0xC9, 0xEE, 0xFA, 0xCC, 0x71, 0x9C, 0xB2, 0xEA, 0xC2, 0x95, 0xF2,
            0xAF, 0x23, 0xFE, 0x19, 0x38, 0xC3, 0xE5, 0x0B, 0x9B, 0x73, 0x08, 0xFA,
            0xFB, 0x60, 0xD0, 0x40, 0xE9, 0x7F, 0x88, 0x55, 0xFF, 0xDD, 0xF9, 0x18,
            0x62, 0x74, 0xB4, 0x23, 0x4A, 0x01, 0x13, 0x2E, 0xD4, 0xB4, 0x5A, 0x6E,
            0x42, 0xD7, 0xF2, 0xE9, 0x35, 0x76, 0x20, 0x6B, 0x1D, 0x2A, 0x40, 0x55,
            0x8B, 0x99, 0xF5, 0x11, 0x99, 0xB1, 0x9E, 0xB5, 0x28, 0x6F, 0x6F, 0xD6,
            0xAC, 0x4B, 0x83, 0x3B, 0xB6, 0x52, 0x27, 0x2A, 0x24, 0xBB, 0x95, 0x44,
            0x7F, 0x6D, 0xFB, 0x9E, 0xBD, 0xE9, 0xC6, 0x89, 0xF0, 0x0E, 0x51, 0x66,
            0xE3, 0xA5, 0x89, 0x57, 0x86, 0x6A, 0x47, 0x47, 0x0C, 0x88, 0x05, 0xE7,
            0xCD, 0xC5, 0x83, 0x5D, 0x5E, 0xAF, 0x82, 0xA6, 0xD1, 0x68, 0xD3, 0x0F,
            0x9E, 0xAD, 0x4D, 0xED, 0x7C, 0xB6, 0xBD, 0xFF, 0x6D, 0x99, 0xB1, 0x70,
            0x74, 0x65, 0x3E, 0xF5, 0x2F, 0xCC, 0x8E, 0x83, 0x41, 0x7D, 0x6F, 0xC4,
            0xD0, 0x93, 0xBA, 0x81, 0x23, 0x67, 0xAA, 0xBD, 0x3E, 0x6E, 0xCB, 0x31,
            0x07, 0x21, 0x19, 0x88, 0x17, 0x8D, 0xA6, 0x92, 0xDA, 0x60, 0x16, 0x64,
            0x8F, 0x0F, 0x08, 0x5F, 0x3A, 0xEA, 0xCB, 0xB3, 0xAA, 0x87, 0xAD, 0x63,
            0x8D, 0x62, 0x82, 0x2C, 0xE2, 0x70, 0xDB, 0x8F, 0x72, 0xF4, 0x8E, 0xEF,
            0x42, 0x82, 0xFC, 0x55, 0xC0, 0xA5, 0x12, 0x3D, 0x53, 0x11, 0x18, 0xE1,
            0x4F, 0x3F, 0x5C, 0xD4, 0xFF, 0x88, 0xF7, 0xA4, 0x97, 0xA7, 0x86, 0x75,
            0x42, 0xB3, 0x5D, 0x53, 0x09, 0x63, 0x2A, 0x98, 0x38, 0x96, 0xEB, 0xB7,
            0x6E, 0xA0, 0x3A, 0xAC, 0xF3, 0xD2, 0x9E, 0x3D, 0x34, 0xA8, 0xF8, 0xA3,
            0x85, 0x9C, 0xE0, 0x46, 0x39, 0xA2, 0xAE, 0xE4, 0x61, 0xF7, 0xD6, 0x37,
            0x85, 0xDB, 0xC6, 0x01, 0xB6, 0xAA, 0xD3, 0x90, 0x9C, 0xAF, 0x43, 0x1E,
            0xD0, 0x96, 0x15, 0x59, 0xB8, 0x10, 0x14, 0x3A, 0x0B, 0xA0, 0xD8, 0x61,
            0xCB, 0xAD, 0xD7, 0x56, 0xC1, 0x34, 0x50, 0xEB, 0xFE, 0x4C, 0x62, 0x76,
            0xCC, 0xBE, 0xC4, 0x72, 0x32, 0xAA, 0x6B, 0x8F, 0x70, 0x55, 0x93, 0x85,
            0xC3, 0x87, 0xB0, 0x4D, 0x71, 0xB4, 0xCF, 0x83, 0x65, 0xA8, 0xFF, 0xC7,
            0x27, 0x7E, 0xC0, 0xFE, 0x9C, 0xAA, 0x1F, 0x32, 0xAA, 0xD2, 0xA3, 0xDF,
            0x78, 0xB1, 0xB0, 0x7A, 0x96, 0x1F, 0x03, 0x90, 0xA1, 0x61, 0xCD, 0x09,
            0x17, 0xD8, 0xA8, 0x2E, 0x2F, 0xB3, 0x24, 0x32, 0x87, 0xBD, 0x46, 0x22,
            0xE7, 0x3D, 0xBB, 0x45, 0xD0, 0xC6, 0xB4, 0x3D, 0xD6, 0xB4, 0x98, 0xEB,
            0x36, 0xDC, 0x85, 0x4C, 0xDA, 0xF6, 0x69, 0x7E, 0x6D, 0xCC, 0xBF, 0xCC,
            0x81, 0xB6, 0x0C, 0xA3, 0xA4, 0xF9, 0xCD, 0x46, 0x6B, 0x85, 0x57, 0xDC,
            0x5E, 0xFA, 0x8C, 0x1A, 0x24, 0xBB, 0xE1, 0x59, 0x15, 0x98, 0x0E, 0x28,
            0x56, 0x4E, 0x85, 0xE7, 0xE3, 0xF0, 0x87, 0xEB, 0x73, 0xB9, 0x75, 0x11,
            0x04, 0x3A, 0x4B, 0x9A, 0x10, 0x12, 0xF3, 0xAB, 0x24, 0xEE, 0x9B, 0xF8,
            0x8A, 0xBE, 0xC9, 0xC8, 0xB5, 0x5B, 0x88, 0xF4, 0x2D, 0xD9, 0x21, 0x90,
            0x99, 0xE4, 0x90, 0x09, 0xDD, 0xBC, 0x5D, 0x80, 0xAA, 0x6C, 0xED, 0x6C,
            0xAE, 0x49, 0xAD, 0x54, 0x92, 0x22, 0x43, 0x40, 0xB0, 0x8C, 0x56, 0xB2,
            0x1B, 0x0D, 0x2E, 0x02, 0x93, 0x82, 0x7F, 0x6F, 0x2F, 0x28, 0x48, 0xB1,
            0xE7, 0x8E, 0xC2, 0xFA, 0x0A, 0xAF, 0x6B, 0xB0, 0xD5, 0xDE, 0x09, 0x23,
            0xE8, 0x36, 0x54, 0xA2, 0x1E, 0x89, 0x7E, 0x23, 0xBB, 0xCE, 0xA8, 0xDE,
            0xE8, 0x15, 0xDB, 0x18, 0x55, 0x3C, 0x5F, 0x53, 0x49, 0x8B, 0xEA, 0x6B,
            0x29, 0xEB, 0xE0, 0xD4, 0x59, 0x66, 0xE5, 0xBA, 0x66, 0x0A, 0x6C, 0x85,
            0xEC, 0x86, 0x07, 0x91, 0x98, 0x8A, 0x23, 0xBA, 0x64, 0xAD, 0x37, 0x81,
            0xDB, 0x00, 0x67, 0x74, 0xBB, 0x84, 0x93, 0xD9, 0x89, 0x28, 0x66, 0x08,
            0x22, 0xF1, 0x41, 0xCD, 0x1C, 0x1E, 0x7B, 0x67, 0x42, 0x83, 0x2F, 0x00,
            0x38, 0x49, 0xA5, 0x66, 0x1F, 0x3A, 0x93, 0xF6, 0xA1, 0x14, 0x70, 0x96,
            0x15, 0x81, 0xBB, 0x48, 0x6F, 0x62, 0xF6, 0x1D, 0x40, 0x17, 0x3C, 0x89,
            0x7A, 0x72, 0x1C, 0xCA, 0x08, 0x98, 0xF4, 0xF5, 0xDE, 0x03, 0x35, 0x73,
            0x7D, 0xDC, 0xEE, 0xB2, 0xC7, 0x78, 0x17, 0x3B, 0x5F, 0x9A, 0x60, 0xBD,
            0xCF, 0xA1, 0x70, 0xC1, 0x3B, 0x80, 0x98, 0xFE, 0x00, 0x66, 0x0B, 0x28,
            0xA6, 0x9D, 0xDC, 0x64, 0x7E, 0xC0, 0xB3, 0xAF, 0x06, 0x4B, 0x4A, 0xC5,
            0xBD, 0x6C, 0x00, 0xD9, 0xF1, 0x9F, 0x48, 0x2C, 0xEC, 0xE5, 0xFB, 0xA5,
            0xB7, 0x38, 0x74, 0x67, 0x8E, 0x5A, 0x33, 0x0F, 0x54, 0x92, 0xA5, 0xD6,
            0x5D, 0x84, 0x38, 0xCB, 0x8A, 0xF3, 0xA6, 0x5C, 0x33, 0x50, 0x38, 0xFE,
            0x03, 0x90, 0x31, 0x9E, 0x4C, 0x26, 0x7D, 0x79, 0xCC, 0xAF, 0xD0, 0x10,
            0xF4, 0x4E, 0x24, 0xED, 0xFA, 0x97, 0x8D, 0x47, 0xFD, 0x47, 0xBE, 0x17,
            0xF1, 0x64, 0x02, 0x2B, 0x49, 0x44, 0x2F, 0x1C, 0xAD, 0x95, 0x19, 0x0F,
            0x72, 0x48, 0xB6, 0x48, 0xCB, 0x8E, 0xC9, 0x98, 0xE3, 0xC3, 0x82, 0x7F,
            0x20, 0xF7, 0x9B, 0x23, 0xC3, 0x29, 0x75, 0x26, 0xF6, 0x45, 0x1B, 0xA3,
            0x5E, 0xC9, 0x89, 0x8E, 0x77, 0xF5, 0x0F, 0x6B, 0xD2, 0x8B, 0x30, 0x94,
            0xB0, 0x19, 0x6D, 0xEF, 0x99, 0xD7, 0x95, 0x9D, 0x8E, 0xF2, 0xB3, 0xB2,
            0x63, 0xEA, 0xF3, 0xFA, 0x8D, 0xD2, 0xBF, 0xD4, 0x24, 0xDD, 0x9E, 0x6C,
            0xD9, 0xF0, 0x27, 0xFA, 0xF1, 0xCF, 0xBB, 0xF0, 0x3C, 0xA1, 0x81, 0x76,
            0x17, 0xEB, 0xAD, 0xBA, 0x7C, 0xFD, 0xCA, 0x00, 0x40, 0xAE, 0x78, 0x9E,
            0x01, 0x6A, 0x53, 0x4D, 0xAA, 0xE1, 0xA6, 0x4B, 0x2B, 0xFF, 0x5E, 0x48,
            0x51, 0x0C, 0x3D, 0x2C, 0x47, 0x36, 0x25, 0x01, 0x6D, 0xFF, 0xBA, 0x58,
            0xD2, 0xF8, 0xE2, 0x91, 0xE0, 0x6D, 0xFE, 0x42, 0x7A, 0xFD, 0xF7, 0x3A,
            0xD0, 0xF5, 0xB1, 0xA9, 0x85, 0xFA, 0x76, 0xD9, 0xB7, 0x46, 0xAD, 0x39,
            0x25, 0xD0, 0x58, 0x45, 0x0B, 0x93, 0xDD, 0xF5, 0x98, 0xE3, 0x39, 0x64,
            0x06, 0x27, 0x6E, 0x57, 0x18, 0x1B, 0x8A, 0x7E, 0xB6, 0x99, 0xD6, 0x04,
            0xCF, 0xE1, 0xAD, 0x2C, 0x17, 0x85, 0x2B, 0xE5, 0x5E, 0x47, 0xFC, 0x32,
            0x71, 0x87, 0xCA, 0x17, 0x36, 0xE6, 0x11, 0xF5, 0xA6, 0xE4, 0xE8, 0x8B,
            0x63, 0x8C, 0x2E, 0x09, 0xCC, 0x8D, 0xC1, 0xE6, 0x61, 0xE4, 0x85, 0xBD,
            0x34, 0xC1, 0xA0, 0x81, 0xD2, 0xFF, 0x10, 0xAB, 0xFF, 0xBB, 0xF2, 0x30,
            0xC4, 0xE9, 0x68, 0x47, 0x85, 0xA0, 0x63, 0xEF, 0xEF, 0x34, 0xC2, 0x90,
            0x42, 0xB1, 0xF9, 0xC1, 0x93, 0xEB, 0xFC, 0x0F, 0x94, 0x02, 0x26, 0x5D,
            0xA9, 0x68, 0xB4, 0xDC, 0x85, 0xAF, 0xE5, 0xD2, 0x6A, 0xEC, 0x40, 0xD6,
            0x25, 0x63, 0xE5, 0x33, 0x94, 0xA3, 0x66, 0xE7, 0x38, 0xA5, 0xEE, 0x23,
            0x3D, 0xEE, 0xD4, 0x9E, 0x3A, 0x54, 0x80, 0xAB, 0x17, 0x33, 0xEA, 0x23,
            0x33, 0x63, 0x3D, 0x6A, 0x50, 0xDE, 0xDF, 0xAC, 0x8B, 0x35, 0x43, 0xC5,
            0x2A, 0xF8, 0x38, 0x18, 0x8E, 0x69, 0x36, 0x9B, 0x07, 0xDC, 0x4B, 0xE4,
            0x9A, 0x97, 0x06, 0x77, 0x6C, 0xA4, 0x4E, 0x54, 0x49, 0x77, 0x2A, 0x88,
            0xFE, 0xDB, 0xF7, 0x3D, 0x2B, 0xF6, 0xC5, 0x19, 0x51, 0x6F, 0x9C, 0x6F,
            0xF4, 0x7D, 0x21, 0x79, 0xA9, 0xD9, 0x63, 0x75, 0xB9, 0xD3, 0x8D, 0x13,
            0xE0, 0x1C, 0xA2, 0xCD, 0xC7, 0x4B, 0x12, 0xAF, 0x0C, 0xD4, 0x8E, 0x8F,
            0x08, 0xB2, 0x4E, 0x7D, 0xDD, 0xD7, 0x70, 0xF6, 0x7A, 0x41, 0x19, 0x5E,
            0x5B, 0xD6, 0x1A, 0xC7, 0x19, 0x10, 0x0B, 0xCF, 0x9B, 0x8B, 0x06, 0xBA,
            0xBD, 0x5F, 0x05, 0x4D, 0xA2, 0xD1, 0xA6, 0x1E, 0xA8, 0x71, 0xC8, 0xA1,
            0xA6, 0x40, 0xD4, 0x81, 0x00, 0x55, 0x0E, 0xBC, 0xF5, 0xD3, 0x32, 0x56,
            0xFF, 0x5A, 0x9B, 0xDA, 0xF9, 0x6D, 0x7B, 0xFE, 0xDB, 0x33, 0x62, 0xE0,
            0xE8, 0xCA, 0x7D, 0xEB, 0x4E, 0x3B, 0x58, 0xB4, 0xC4, 0xA6, 0xA9, 0xC5,
            0x66, 0x39, 0x69, 0x11, 0xBF, 0xC8, 0xE9, 0xA3, 0x5F, 0x99, 0x1D, 0x06,
            0x82, 0xFA, 0xDF, 0x89, 0xA1, 0x27, 0x75, 0x02, 0x46, 0xCF, 0x55, 0x7A,
            0xEE, 0xF8, 0xDE, 0x68, 0xBF, 0x31, 0x0D, 0xB2, 0x1C, 0x2D, 0x7E, 0xF3,
            0x11, 0xCD, 0xC1, 0x32, 0x7C, 0xDD, 0x96, 0x62, 0x0E, 0x42, 0x33, 0x10,
            0x2F, 0x1B, 0x4D, 0x25, 0xB4, 0xC0, 0x2C, 0xC8, 0xCD, 0xBC, 0x55, 0x0C,
            0x33, 0x89, 0xE1, 0x2B, 0x92, 0x11, 0x46, 0xD4, 0xE3, 0xC2, 0xB8, 0x80,
            0xDC, 0x1E, 0x10, 0xBE, 0x75, 0xD5, 0x97, 0x67, 0x55, 0x0F, 0x5A, 0xC7,
            0x1A, 0xC5, 0x04, 0x59, 0x6D, 0x7F, 0xD3, 0xD0, 0x48, 0x1E, 0x45, 0x5C,
            0xE8, 0x05, 0x51, 0x36, 0x4D, 0xC7, 0x90, 0x11, 0x06, 0xE1, 0xB7, 0x1E,
            0xE5, 0xE9, 0x1D, 0xDE, 0x85, 0x05, 0xF8, 0xAB, 0x81, 0x4A, 0x24, 0x7B,
            0xB7, 0x80, 0x74, 0x70, 0xD8, 0x22, 0xCF, 0xE5, 0x38, 0x0F, 0xF3, 0x5A,
            0xD6, 0x48, 0xB0, 0x33, 0xA6, 0x22, 0x31, 0xC2, 0x9E, 0x7E, 0xB9, 0xA9,
            0xFF, 0x11, 0xEF, 0x49, 0x2F, 0x4F, 0x0C, 0xEA, 0x17, 0x43, 0xF2, 0xAC,
            0xA3, 0xB5, 0x6B, 0x92, 0x42, 0x1B, 0xE4, 0xB8, 0x78, 0x4D, 0x98, 0xA2,
            0x85, 0x66, 0xBA, 0xA6, 0x12, 0xC6, 0x55, 0x30, 0x71, 0x2D, 0xD7, 0x6E,
            0xDD, 0x40, 0x75, 0x58, 0x34, 0x07, 0x79, 0xC8, 0x2F, 0x0D, 0x87, 0x0B,
            0xCC, 0x27, 0xDC, 0x9F, 0x8A, 0x42, 0xE1, 0x10, 0x25, 0xA5, 0x3C, 0x7A,
            0x69, 0x51, 0xF1, 0x47, 0x0B, 0x39, 0xC0, 0x8C, 0x73, 0x45, 0x5D, 0xC9,
            0x94, 0xC4, 0xFF, 0x14, 0x54, 0x9A, 0x23, 0x7C, 0xB6, 0x33, 0xCB, 0x7D,
            0x24, 0x47, 0xC9, 0x81, 0xC3, 0xEF, 0xAC, 0x6F, 0x0B, 0xB7, 0x8C, 0x03,
            0x6D, 0x55, 0xA7, 0x21, 0x39, 0x5E, 0x86, 0x3C, 0x72, 0x8E, 0x6F, 0x01,
            0x36, 0x7C, 0x5E, 0x38, 0xD0, 0x5F, 0xAC, 0xD0, 0x6E, 0x5C, 0x12, 0x74,
            0x63, 0x2C, 0x2A, 0xB3, 0x70, 0x20, 0x28, 0x74, 0x17, 0x41, 0xB0, 0xC3,
            0x97, 0x5B, 0xAE, 0xAD, 0xD2, 0x4D, 0xE9, 0xDD, 0x4D, 0xEB, 0xFA, 0x4F,
            0xAA, 0x4B, 0xBB, 0x32, 0xC0, 0x59, 0x3A, 0xE5, 0x40, 0x68, 0xA1, 0xD7,
            0xFC, 0x98, 0xC4, 0xED, 0x99, 0x7D, 0x88, 0xE4, 0x65, 0x54, 0xD7, 0x1F,
            0xF1, 0x09, 0x62, 0xB9, 0xC1, 0x53, 0x16, 0xD6, 0x24, 0x77, 0x83, 0x15,
            0x32, 0x56, 0x43, 0x57, 0xE0, 0xAB, 0x27, 0x0B, 0x87, 0x0F, 0x60, 0x9A,
            0xE3, 0x69, 0x9F, 0x06, 0xCB, 0x51, 0xFF, 0x8E, 0x51, 0xCA, 0xE4, 0x65,
            0xBA, 0xC4, 0xB2, 0xA1, 0x5E, 0x63, 0x94, 0xF7, 0x9C, 0x53, 0x6B, 0xC6,
            0x4E, 0xFD, 0x81, 0xFD, 0x39, 0x54, 0x3E, 0x65, 0x55, 0xA5, 0x47, 0xBE,
            0xF1, 0x63, 0x60, 0xF4, 0xFF, 0x9C, 0x42, 0x93, 0x04, 0x9F, 0xEC, 0x5E,
            0xE8, 0xAF, 0x4C, 0x4F, 0xA6, 0x61, 0xF4, 0xBC, 0xEE, 0x3E, 0x07, 0x21,
            0x42, 0xC3, 0x9A, 0x12, 0x2F, 0xB1, 0x50, 0x5C, 0x5F, 0x66, 0x48, 0x65,
            0x5F, 0x5F, 0xC4, 0x4F, 0x7F, 0x08, 0x48, 0x29, 0x92, 0xBB, 0x5B, 0xAD,
            0x08, 0x64, 0xDC, 0x2D, 0xCD, 0x7A, 0x8C, 0x45, 0xCE, 0x7B, 0x76, 0x8B,
            0xA1, 0x8D, 0x68, 0x7B, 0xAD, 0x69, 0x31, 0xD7, 0x7C, 0x1B, 0x4F, 0x2B,
            0xF3, 0xB0, 0xA4, 0xB0, 0x1C, 0x87, 0x63, 0x8A, 0xFA, 0x6B, 0xA5, 0x9F,
            0x6D, 0xB9, 0x0A, 0x99, 0xB5, 0xEC, 0xD2, 0xFC, 0xDB, 0x99, 0x7F, 0x99,
            0x03, 0x6C, 0x19, 0x46, 0xDC, 0xD8, 0xC9, 0xF7, 0x88, 0x27, 0x00, 0xC7,
            0x66, 0x93, 0x74, 0x68, 0x54, 0x6E, 0x8D, 0x0E, 0x8B, 0xF3, 0x9A, 0x8C,
            0xD7, 0x0A, 0xAF, 0xB8, 0xBD, 0xF5, 0x18, 0x34, 0x49, 0x77, 0xC2, 0xB3,
            0x3A, 0x92, 0x59, 0xE2, 0xEA, 0xC1, 0x7D, 0x83, 0x00, 0xFF, 0x13, 0xC5,
            0x1E, 0x75, 0x56, 0xFB, 0x2B, 0x30, 0x1C, 0x50, 0xAC, 0x9D, 0x0B, 0xCF,
            0xC7, 0xE1, 0x0F, 0xD6, 0xE7, 0x72, 0xEA, 0x22, 0x9A, 0x51, 0xDF, 0x3E,
            0x91, 0x56, 0xD9, 0xF4, 0x7A, 0xEB, 0x04, 0x27, 0xB0, 0x70, 0x7E, 0x6A,
            0x08, 0x74, 0x97, 0x34, 0x20, 0x25, 0xE7, 0x56, 0x49, 0xDD, 0x37, 0xF1,
            0x15, 0x7D, 0x93, 0x90, 0xB9, 0x15, 0x54, 0x5A, 0x1D, 0xEE, 0x35, 0x6D,
            0xF4, 0xD7, 0x3C, 0x00, 0x42, 0x7F, 0x07, 0xD8, 0xA8, 0xB7, 0x11, 0xE8,
            0x5B, 0xB2, 0x43, 0x21, 0x33, 0xC9, 0x20, 0x13, 0xBB, 0x78, 0xBB, 0x01,
            0x19, 0xD6, 0xD2, 0x86, 0x66, 0x79, 0x91, 0x1A, 0x8E, 0xC3, 0x2B, 0xE2,
            0xEC, 0x7A, 0x2F, 0x49, 0x96, 0xD9, 0xDA, 0xD9, 0x5C, 0x93, 0x5A, 0xA9,
            0x24, 0x44, 0x86, 0x81, 0x61, 0x18, 0xAD, 0x65, 0x27, 0xB8, 0x19, 0xB7,
            0x61, 0x58, 0x88, 0x92, 0x99, 0x4E, 0x8D, 0x70, 0x36, 0x1A, 0x39, 0x2D,
            0x36, 0x1A, 0x5C, 0x05, 0x27, 0x04, 0xFE, 0xDE, 0x5E, 0x50, 0x91, 0x63,
            0xCF, 0x1D, 0x85, 0xF4, 0x87, 0x7B, 0x9F, 0x6B, 0x1A, 0xCF, 0x2C, 0xE5,
            0xE3, 0x5A, 0x9A, 0x92, 0x98, 0x1F, 0x11, 0xBC, 0x15, 0x5E, 0xD7, 0x61,
            0xAB, 0xBC, 0x12, 0x47, 0xD0, 0x6C, 0xA9, 0x44, 0x3D, 0x12, 0xFC, 0x46,
            0xA4, 0x3F, 0x14, 0x0F, 0x96, 0x77, 0xC0, 0x7C, 0x6D, 0x66, 0xA2, 0xB5,
            0x6A, 0x10, 0x68, 0x0E, 0xB5, 0x9D, 0x51, 0xBD, 0xD0, 0x2B, 0xB6, 0x30,
            0xAA, 0x78, 0xBE, 0xA6, 0x93, 0x17, 0xD4, 0xD7, 0x04, 0xFC, 0x92, 0xD3,
            0xED, 0xE0, 0x64, 0x0B, 0x17, 0x72, 0xB5, 0x57, 0xC4, 0x15, 0x40, 0x9F,
            0x53, 0xD7, 0xC1, 0xA8, 0xB2, 0xCD, 0xCB, 0x74, 0xCC, 0x14, 0xD9, 0x0B,
            0xD9, 0x0C, 0x0F, 0x22, 0xE2, 0xB6, 0x02, 0xC6, 0x8F, 0x06, 0x19, 0x4F,
            0x71, 0x1E, 0xD2, 0xFA, 0x8E, 0x0E, 0x9B, 0x6A, 0xF3, 0x14, 0x47, 0x74,
            0xC9, 0x5A, 0x6F, 0x03, 0xB6, 0x00, 0xCE, 0xE9, 0x77, 0x09, 0x27, 0xB3,
            0x42, 0x75, 0x84, 0x1A, 0xF4, 0x91, 0xBD, 0x38, 0x0B, 0x0A, 0xC5, 0x18,
            0x20, 0x0B, 0xB3, 0xFB, 0xD0, 0x50, 0xCC, 0x10, 0x45, 0xE2, 0x83, 0x9A,
            0x38, 0x3C, 0xF6, 0xCE, 0x85, 0x06, 0x5E, 0x01, 0x61, 0x31, 0x0F, 0x7E,
            0x78, 0x29, 0x51, 0xA1, 0x85, 0x36, 0xFD, 0x3F, 0xD2, 0x04, 0xCA, 0x49,
            0x70, 0x93, 0x4A, 0xCC, 0x3E, 0x75, 0x27, 0xED, 0x42, 0x28, 0xE1, 0x2C,
            0x2B, 0x03, 0x76, 0x90, 0xC1, 0xF2, 0x89, 0xA2, 0x03, 0xBE, 0xF5, 0xD6,
            0xFF, 0x22, 0xEA, 0xDD, 0x7C, 0x01, 0xE2, 0xD8, 0xDE, 0xC5, 0xEC, 0x3A,
            0x80, 0x2E, 0x79, 0x12, 0xF4, 0xE4, 0x39, 0x94, 0x11, 0x31, 0xE9, 0xEA,
            0x6F, 0xA4, 0x2F, 0x54, 0xBD, 0xE5, 0xAB, 0x29, 0x49, 0xEE, 0x32, 0x65,
            0x46, 0x33, 0x7D, 0xA2, 0x7E, 0x06, 0x6A, 0xE6, 0xFB, 0xB9, 0xDD, 0x65,
            0x8E, 0xF0, 0x2E, 0x76, 0xBF, 0x34, 0xC1, 0x7B, 0xCF, 0x67, 0xA9, 0x88,
            0xC6, 0x72, 0x0F, 0x5E, 0x33, 0xFA, 0x25, 0x87, 0xE8, 0x36, 0x55, 0x33,
            0x5D, 0x42, 0xE1, 0x82, 0x77, 0x01, 0x31, 0xFC, 0x00, 0xCC, 0x16, 0x51,
            0x4D, 0x3B, 0xB8, 0xC9, 0xEC, 0x23, 0x22, 0xEC, 0x4A, 0xCA, 0xE3, 0xC7,
            0xBD, 0xC6, 0x1D, 0xA0, 0x1A, 0x39, 0x2C, 0x81, 0xFD, 0x81, 0x67, 0x5E,
            0x0C, 0x96, 0x95, 0x8B, 0x7A, 0xD8, 0x01, 0xB3, 0xE3, 0x3E, 0x90, 0x58,
            0x4C, 0xE0, 0xA4, 0x30, 0x31, 0x5D, 0x47, 0xB0, 0xC7, 0xD2, 0x0A, 0x42,
            0xB4, 0x3C, 0x04, 0x10, 0x1B, 0xCB, 0xF7, 0x4B, 0x6E, 0x70, 0xE8, 0xCF,
            0x1C, 0xB4, 0x66, 0x1E, 0xA9, 0x25, 0x4B, 0xAD, 0xAA, 0xAA, 0x34, 0x25,
            0x53, 0xBB, 0x3A, 0xF4, 0xA1, 0xBE, 0x6D, 0xEF, 0xFE, 0x27, 0xDF, 0xE5,
            0xBB, 0x08, 0x71, 0x97, 0x15, 0xE7, 0x4C, 0xB8, 0x66, 0xA0, 0x71, 0xFC,
            0x07, 0x20, 0x63, 0x3C, 0x0A, 0x69, 0xB2, 0xF9, 0x28, 0x2C, 0x9E, 0x83,
            0xDB, 0xAA, 0x7A, 0x0D, 0x50, 0x22, 0xF7, 0x74, 0x98, 0x4C, 0xFA, 0xF3,
            0x99, 0x5F, 0xA0, 0x21, 0xE8, 0x9C, 0x49, 0xDB, 0xF5, 0x2F, 0x1A, 0x8E,
            0x29, 0x2D, 0x39, 0x9D, 0xA4, 0x94, 0x72, 0x1A, 0x55, 0x96, 0x42, 0x2A,
            0xA2, 0x2D, 0x8E, 0xC6, 0x38, 0x8F, 0x7C, 0x2F, 0xE2, 0xC8, 0x04, 0x56,
            0x92, 0x88, 0x5E, 0x39, 0x5B, 0x2A, 0x32, 0x1F, 0x89, 0xEE, 0xBF, 0x41,
            0xDF, 0x03, 0xD6, 0x6D, 0x2F, 0x82, 0x55, 0xC8, 0x0C, 0x28, 0xA6, 0x57,
            0xE4, 0x91, 0x6C, 0x91, 0x97, 0x1D, 0x93, 0x31, 0xC7, 0x87, 0x04, 0xFE,
            0x41, 0xEF, 0x36, 0x46, 0x55, 0xF0, 0xAF, 0xFF, 0xAA, 0xD6, 0x41, 0x0A,
            0x7A, 0x8D, 0x0F, 0x0F, 0x16, 0xED, 0xA2, 0x0E, 0x44, 0x52, 0xEA, 0x4D,
            0xEC, 0x8A, 0x37, 0x46, 0xBD, 0x93, 0x13, 0x1C, 0xEF, 0xEA, 0x1E, 0xD7,
            0xF5, 0x33, 0x29, 0x23, 0xD1, 0x41, 0xE5, 0x7D, 0x00, 0x99, 0x18, 0xED,
            0xB8, 0xE8, 0x8A, 0x9F, 0x67, 0x16, 0x61, 0x29, 0x60, 0x32, 0xDB, 0xDF,
            0x33, 0xAF, 0x2B, 0x3B, 0x1D, 0xE5, 0x67, 0x65, 0xD6, 0x77, 0xA2, 0x47,
            0x5D, 0xF9, 0x09, 0xE4, 0x8E, 0xA5, 0x20, 0xCA, 0x4A, 0xE7, 0xF3, 0x2D,
            0xC7, 0xD5, 0xE7, 0xF5, 0x1B, 0xA5, 0x7F, 0xA8, 0x49, 0xBB, 0x3C, 0xD9,
            0xB3, 0xE0, 0x4F, 0xF4, 0x76, 0xB4, 0x24, 0x9B, 0x26, 0x6E, 0xAD, 0x93,
            0xF4, 0xB1, 0x37, 0x28, 0xE4, 0xE2, 0xDB, 0xBC, 0x21, 0x9F, 0x77, 0xE0,
            0x79, 0x43, 0x02, 0xEC, 0x2F, 0xD7, 0x5B, 0x74, 0xF9, 0xFB, 0x94, 0x01,
            0x90, 0xFE, 0xB4, 0x8E, 0x44, 0x88, 0xD0, 0xD7, 0x92, 0xDD, 0x50, 0x85,
            0xAE, 0xF9, 0x00, 0x49, 0x81, 0x5C, 0xF1, 0x3C, 0x02, 0xD4, 0xA6, 0x9B,
            0x55, 0xC3, 0x4C, 0x96, 0x57, 0xFE, 0xBC, 0x90, 0x30, 0x3D, 0x32, 0x52,
            0x3F, 0x1F, 0x74, 0xA0, 0xE8, 0xC9, 0x47, 0x67, 0x00, 0xFC, 0x28, 0xD8,
            0xA2, 0x18, 0x7A, 0x58, 0x8E, 0x6C, 0x4A, 0x02, 0xDB, 0xFF, 0x74, 0xB1,
            0xA5, 0xF1, 0xC5, 0x22, 0x13, 0x79, 0xB9, 0x36, 0xB3, 0xA7, 0x98, 0x39,
            0x66, 0xF5, 0x7F, 0x40, 0xF2, 0xF3, 0x51, 0x6A, 0x02, 0xDB, 0xFC, 0x84,
            0xF5, 0xFB, 0xEE, 0x75, 0xA1, 0xEB, 0x63, 0x53, 0x0B, 0xF4, 0xED, 0xB3,
            0xB3, 0xBA, 0x3F, 0xEA, 0xC8, 0x30, 0x3C, 0x4E, 0x1C, 0xE1, 0x68, 0xA2,
            0x5C, 0xF6, 0x79, 0xFB, 0xAC, 0x8D, 0x5A, 0x72, 0x4B, 0xA0, 0xB0, 0x8A,
            0x17, 0x27, 0xBB, 0xEB, 0x31, 0xC6, 0x72, 0xC9, 0x1D, 0xEC, 0x99, 0x1C,
            0x76, 0x6B, 0x62, 0xB1, 0xAA, 0x2D, 0xB0, 0x1A, 0x66, 0xC4, 0xE6, 0x81,
            0x0C, 0x4E, 0xDC, 0xAE, 0x30, 0x37, 0x14, 0xFD, 0x6D, 0x33, 0xAC, 0x09,
            0x9F, 0xC3, 0x5A, 0x58, 0xBD, 0x2F, 0x1F, 0xC0, 0x0D, 0xFC, 0xC6, 0xC6,
            0xD0, 0x39, 0xA7, 0xF8, 0xC8, 0xC1, 0xCE, 0x10, 0x2F, 0x0A, 0x57, 0xCA,
            0xBC, 0x8F, 0xF8, 0x64, 0xE3, 0x0F, 0x94, 0x2E, 0x6D, 0xCC, 0x23, 0xEA,
            0x9E, 0x6B, 0x94, 0xA4, 0x81, 0x44, 0x2A, 0x5F, 0x5E, 0x05, 0x9F, 0xDF,
            0x3A, 0xCE, 0xB7, 0xA2, 0x8F, 0xC9, 0xD1, 0x16, 0xC7, 0x18, 0x5C, 0x13,
            0x99, 0x1B, 0x83, 0xCC, 0xC3, 0xC9, 0x0B, 0x7B, 0x3E, 0xA8, 0x12, 0x78,
            0xFA, 0xD3, 0x8E, 0x28, 0x24, 0x11, 0x88, 0x3D, 0x94, 0xCB, 0x9F, 0x33,
            0x69, 0x83, 0x41, 0x03, 0xA5, 0xFE, 0x21, 0x57, 0xFF, 0x77, 0xE4, 0x61,
            0x89, 0xD2, 0xD0, 0x8E, 0xD8, 0xE2, 0x82, 0x6D, 0x98, 0x35, 0xF3, 0x6C,
            0x42, 0x7D, 0xEF, 0x90, 0xDE, 0xD0, 0x44, 0xC6, 0xC9, 0x40, 0xC7, 0xDF,
            0xDE, 0x69, 0x85, 0x20, 0x85, 0x63, 0xF3, 0x83, 0x27, 0xD7, 0xF8, 0x1F,
            0x78, 0x21, 0x04, 0xB1, 0xE3, 0xA2, 0x57, 0x1B, 0x38, 0x69, 0xF8, 0x72,
            0x70, 0xD5, 0x6C, 0x57, 0xEA, 0x04, 0x4C, 0xBB, 0x52, 0xD1, 0x69, 0xB9,
            0x0B, 0x5F, 0xCB, 0xA4, 0xD5, 0xD8, 0x81, 0xAD, 0x5B, 0x65, 0x8F, 0xD5,
            0x6F, 0x1A, 0xBB, 0x82, 0xB6, 0x55, 0xC0, 0x55, 0x82, 0xDA, 0x15, 0xE5,
            0x4A, 0xC7, 0xCA, 0x67, 0x29, 0x46, 0xCD, 0xCE, 0x71, 0x4B, 0xDC, 0x46,
            0x7B, 0xDD, 0xA9, 0x3C, 0xFB, 0xA6, 0x09, 0x09, 0x14, 0x8D, 0x1F, 0xF5,
            0xCC, 0x41, 0xD7, 0xB7, 0x2C, 0xDF, 0x3D, 0x74, 0x74, 0xA9, 0x01, 0x56,
            0x2E, 0x67, 0xD4, 0x46, 0x66, 0xC6, 0x7A, 0xD4, 0xA1, 0xBD, 0xBF, 0x58,
            0xC5, 0xC8, 0xC2, 0x38, 0x13, 0xAC, 0x06, 0x7D, 0xDB, 0xCC, 0x71, 0x25,
            0xF6, 0xBF, 0x2B, 0x10, 0xD4, 0x6A, 0x87, 0x8A, 0x55, 0xF0, 0x70, 0x31,
            0x1C, 0xD2, 0x6D, 0x36, 0x0F, 0xB8, 0x97, 0xC9, 0x65, 0x0B, 0x44, 0xE4,
            0x68, 0x3B, 0xA2, 0x0A, 0xA1, 0xD8, 0x66, 0xC7, 0x58, 0xBA, 0x03, 0x81,
            0xF7, 0x2E, 0x0C, 0xEE, 0xD9, 0x48, 0x9C, 0xA8, 0x92, 0xEE, 0x55, 0x11,
            0xFD, 0xB7, 0xEE, 0x7B, 0x46, 0x4F, 0xCF, 0x80, 0xE4, 0x83, 0x4E, 0x93,
            0x2F, 0xE4, 0x5E, 0xE0, 0xAA, 0xB5, 0x7A, 0x33, 0x57, 0xED, 0x8A, 0x32,
            0xA2, 0xDF, 0x38, 0xDF, 0xE8, 0xFA, 0x42, 0xF3, 0x53, 0xB2, 0xC6, 0xEA,
            0xE6, 0x8C, 0x49, 0x5C, 0x9F, 0x14, 0xEA, 0xE4, 0x55, 0xF0, 0x49, 0x02,
            0x04, 0xB0, 0x52, 0xA2, 0xB1, 0xA7, 0x1A, 0x27, 0xC0, 0x39, 0x45, 0x9B,
            0x8E, 0x96, 0x25, 0x5E, 0x19, 0xA9, 0x1D, 0x1F, 0x00, 0xC6, 0xD9, 0x49,
            0xFD, 0xF2, 0x97, 0xA0, 0x33, 0x9C, 0x2E, 0xAF, 0x4E, 0xAB, 0x89, 0x57,
            0x11, 0x64, 0x9C, 0xFB, 0xBB, 0xAE, 0xE1, 0xEC, 0xF4, 0x82, 0x32, 0xBC,
            0xB7, 0xAC, 0x35, 0x8E, 0xA0, 0x05, 0x5F, 0x95, 0x86, 0x65, 0x33, 0xD7,
            0x49, 0x88, 0x39, 0x4D, 0xE0, 0xAE, 0xA1, 0xC6, 0x32, 0x20, 0x17, 0x9F,
            0x37, 0x16, 0x0D, 0x75, 0x7A, 0xBE, 0x0A, 0x9B, 0x45, 0xA3, 0x4C, 0x3C,
            0x83, 0x41, 0xD4, 0xF1, 0x0A, 0xDD, 0xDF, 0x4E, 0xC7, 0xB4, 0x01, 0x6A,
            0x12, 0xA1, 0xD8, 0x74, 0x92, 0xE3, 0x91, 0x43, 0x4C, 0x81, 0xA9, 0x02,
            0x00, 0xAA, 0x1D, 0x79, 0xEB, 0xA6, 0x64, 0xAD, 0x23, 0x82, 0x52, 0x2D,
            0x71, 0x4A, 0x7B, 0x39, 0xBD, 0xA0, 0x16, 0x88, 0xBC, 0xA4, 0xF0, 0xE5,
            0x3C, 0xB5, 0x37, 0xB5, 0xF2, 0xDA, 0xF7, 0xFD, 0xB6, 0x66, 0xC5, 0xC1,
            0xD1, 0x94, 0xFB, 0xD7, 0x8D, 0xD4, 0xF4, 0xDB, 0xCF, 0x11, 0x25, 0xC6,
            0x0B, 0x6C, 0xCE, 0x30, 0x86, 0x96, 0x6F, 0x9F, 0x9C, 0x76, 0xB1, 0x69,
            0x89, 0x4D, 0x53, 0x8A, 0xCC, 0x72, 0xD2, 0x23, 0x7F, 0x91, 0xD3, 0x46,
            0x2D, 0x17, 0x72, 0x07, 0xB4, 0x86, 0x81, 0xB1, 0x71, 0x78, 0xD9, 0xD2,
            0x28, 0x93, 0x47, 0x0E, 0xBF, 0x32, 0x3A, 0x0D, 0x05, 0xF5, 0xBF, 0x13,
            0x42, 0x4E, 0xEA, 0x04, 0x8D, 0x9E, 0xAA, 0xF4, 0x0E, 0x53, 0xF9, 0x63,
            0x38, 0x3E, 0x6D, 0x28, 0xFF, 0x44, 0xE1, 0xF5, 0xDA, 0x9C, 0x3E, 0xBC,
            0x1F, 0xF1, 0xBC, 0xD1, 0x7E, 0x62, 0x1B, 0x64, 0x38, 0x5A, 0xFD, 0xE6,
            0x23, 0x9B, 0x82, 0x65, 0xAE, 0x90, 0x7F, 0xBF, 0x43, 0xA9, 0xC9, 0x5F,
            0x85, 0x50, 0xF6, 0x17, 0x74, 0x99, 0x16, 0x2D, 0xF9, 0xBB, 0x2C, 0xC4,
            0x1C, 0x84, 0x66, 0x20, 0x5E, 0x36, 0x9A, 0x4B, 0x69, 0x80, 0x59, 0x90,
            0x48, 0xDA, 0xEF, 0xAA, 0x21, 0x4F, 0xB4, 0x1B, 0xE3, 0x3C, 0x91, 0xBA,
            0x3E, 0x82, 0xCD, 0xD8, 0x59, 0x78, 0xAA, 0x18, 0x67, 0x13, 0xC2, 0x57,
            0x24, 0x22, 0x8D, 0xA9, 0xC7, 0x85, 0x71, 0x01, 0xE8, 0x19, 0x69, 0x76,
            0x5A, 0xD8, 0x10, 0x6C, 0x99, 0x28, 0x86, 0x58, 0x90, 0x87, 0xE5, 0x49,
            0x7A, 0x3C, 0x21, 0x7C, 0xEB, 0xAB, 0x2E, 0xCE, 0xAA, 0x1E, 0xB5, 0x8E,
            0x35, 0x8A, 0x08, 0xB3, 0xCB, 0x5D, 0xE2, 0x12, 0xD6, 0x60, 0xFC, 0xF5,
            0x17, 0x14, 0xBE, 0x7F, 0x62, 0x88, 0x9C, 0xFB, 0xDA, 0xFF, 0xA7, 0xA0,
            0x90, 0x3C, 0x8A, 0xB9, 0xD0, 0x0A, 0xA2, 0x6C, 0x9B, 0x8F, 0x20, 0x22,
            0x6B, 0x9E, 0x64, 0xCE, 0xAD, 0xF7, 0x58, 0x82, 0x6D, 0x00, 0xA9, 0x9D,
            0xCC, 0x8D, 0xB4, 0x6A
        };

        [Test]
        public void TestInit()
        {
            Span<byte> iv = new byte[16];
            iv.Fill(0xCC);

            HarpoAesCtr aes = new HarpoAesCtr(_key);
            aes.Init(iv);

            var counter = (Memory<byte>)(typeof(HarpoAesCtr).GetField("_counter", BindingFlags.Instance | BindingFlags.NonPublic)?.GetValue(aes)
                ?? throw new Exception("_counter field was null"));

            ReadOnlySpan<byte> expectedCounter = new byte[16] {
                0xD4, 0x78, 0xDE, 0x8B, 0x1A, 0x40, 0xED, 0x2F, 0x89, 0xF8, 0x01, 0x66,
                0xEE, 0xFC, 0xD5, 0x13
            };

            Assert.That(expectedCounter.SequenceEqual(counter.Span));
        }

        [Test]
        public void TestEncrypt2Times()
        {
            Span<byte> iv = new byte[16];
            iv.Fill(0xCC);

            HarpoAesCtr aes = new HarpoAesCtr(_key);
            aes.Init(iv);

            ReadOnlySpan<byte> data1 = new byte[16] {
                0xB1, 0xB3, 0xD9, 0x48, 0x4C, 0x6E, 0x42, 0x40, 0x40, 0x3F, 0x63, 0xC6,
                0xB5, 0x01, 0x2C, 0xC5
            };
            Span<byte> data1Ciphertext = new byte[16];
            aes.EncryptCtr(data1, data1Ciphertext);

            ReadOnlySpan<byte> data1Expected = new byte[16] {
                0xCD, 0xF9, 0x86, 0xA8, 0xC7, 0x97, 0x5D, 0x53, 0x90, 0x53, 0x5C, 0x1D,
                0x79, 0x54, 0xFA, 0x7F
            };
            Assert.That(data1Expected.SequenceEqual(data1Ciphertext));

            Span<byte> data2 = new byte[24];
            data2.Fill(0xDD);
            Span<byte> data2Ciphertext = new byte[24];
            aes.EncryptCtr(data2, data2Ciphertext);

            ReadOnlySpan<byte> data2Expected = new byte[24] {
                0x33, 0xFF, 0x1B, 0xD5, 0x01, 0x84, 0x48, 0x6B, 0x89, 0x7A, 0xDB, 0x64,
                0x15, 0x4B, 0x78, 0x5F, 0xAB, 0x87, 0x7A, 0x29, 0x07, 0x83, 0x24, 0x0A
            };
            Assert.That(data2Expected.SequenceEqual(data2Ciphertext));
        }

        [Test]
        public void CalculateChecksumTest()
        {
            ReadOnlySpan<byte> aesKey = new byte[16] {
                0x43, 0x95, 0x0F, 0x7B, 0x8B, 0x89, 0x6E, 0x30, 0x45, 0x78, 0x24, 0xDC,
                0x8A, 0x59, 0x1E, 0x32
            };

            HarpoAesCtr aes = new(aesKey);

            var type = typeof(HarpoAesCtr);

            // Mock private fields
            var var2Field = type.GetField("_var2", BindingFlags.Instance | BindingFlags.NonPublic);
            Assert.That(var2Field, Is.Not.Null);
            var2Field!.SetValue(aes, 0x10U);

            var var1Field = type.GetField("_var1", BindingFlags.Instance | BindingFlags.NonPublic);
            Assert.That(var1Field, Is.Not.Null);
            var1Field!.SetValue(aes, 0x00U);

            // Mock LUT
            var lutOwnerField = type.GetField("_lutOwner", BindingFlags.Instance | BindingFlags.NonPublic);
            Assert.That(lutOwnerField, Is.Not.Null);

            var lutMemoryOwner = lutOwnerField!.GetValue(aes) as IMemoryOwner<byte>;
            Assert.That(lutMemoryOwner, Is.Not.Null);

            _mockChecksumLut.CopyTo(lutMemoryOwner!.Memory);

            // Mock buffers
            var bufferOwnerField = type.GetField("_encryptionBufferOwner", BindingFlags.Instance | BindingFlags.NonPublic);
            Assert.That(bufferOwnerField, Is.Not.Null);

            var bufferMemoryOwner = bufferOwnerField!.GetValue(aes) as IMemoryOwner<byte>;
            Assert.That(bufferMemoryOwner, Is.Not.Null);

            var aes3 = bufferMemoryOwner!.Memory.Span.Slice(0x10 * 2, 0x10);
            var mockAes3 = new byte[16] {
                0x73, 0x8F, 0xA8, 0xA0, 0x7E, 0xF0, 0x89, 0x3A, 0x97, 0xCB, 0xF6, 0x81,
                0x25, 0x0A, 0xD2, 0xFA
            };
            mockAes3.CopyTo(aes3);

            var aes2 = bufferMemoryOwner.Memory.Span.Slice(0x10, 0x10);
            var mockAes2 = new byte[16]{
                0x47, 0x8F, 0xC2, 0x67, 0x4E, 0x3E, 0xB1, 0xDD, 0x3D, 0xD9, 0x78, 0x71,
                0x03, 0xE9, 0x23, 0x16
            };
            mockAes2.CopyTo(aes2);

            var ivExtension = bufferMemoryOwner.Memory.Span.Slice(0x10 * 5, 0x10);
            var mockIvExtension = new byte[16] {
                0x58, 0x5C, 0xE8, 0x58, 0x5D, 0xF1, 0x32, 0xFA, 0x4C, 0x7F, 0xD9, 0xBE,
                0xCE, 0xB9, 0x74, 0x61
            };
            mockIvExtension.CopyTo(ivExtension);
            // Mocking done

            // Calculate the checksum
            Span<byte> destination = new byte[16];
            aes.CalculateChecksum(destination);

            // Assert
            Span<byte> expectedChecksum = new byte[16] {
                0x5A, 0x94, 0x8D, 0xB5, 0x1D, 0xC3, 0x4F, 0xF2, 0x58, 0x08, 0xED, 0x3A,
                0xBE, 0x15, 0xEB, 0x12
            };
            Assert.That(expectedChecksum.SequenceEqual(destination));
        }
}