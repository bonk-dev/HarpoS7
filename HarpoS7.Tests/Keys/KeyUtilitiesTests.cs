using HarpoS7.Keys;

namespace HarpoS7.Tests.Keys;

public class KeyUtilitiesTests
{
    [Test]
        public void DeriveSeedEncryptionKeyTest()
        {
            Span<byte> destination = new byte[48];
            ReadOnlySpan<byte> a2 = new byte[32] {
                0xB3, 0x42, 0x0D, 0x0C, 0x62, 0x42, 0xB1, 0x50, 0xD6, 0x86, 0x2A, 0x4D,
                0x61, 0x55, 0x9E, 0x78, 0xA0, 0x0D, 0xA5, 0xDC, 0x7B, 0x68, 0x55, 0x1A,
                0xD8, 0x6D, 0xF0, 0x07, 0xAB, 0xA5, 0xBB, 0xD9
            };
            ReadOnlySpan<byte> a3 = new byte[64] {
                0x18, 0xF1, 0x24, 0xE0, 0xB4, 0xA6, 0xD9, 0x64, 0xCE, 0xFC, 0x84, 0x53,
                0xED, 0x90, 0x3D, 0x52, 0xF1, 0xB8, 0xC8, 0x52, 0x58, 0xFE, 0x5B, 0x24,
                0x59, 0x77, 0x6C, 0x06, 0x30, 0xDC, 0x02, 0xFE, 0xF6, 0xD0, 0xB0, 0x82,
                0xD6, 0xD1, 0x0B, 0x1E, 0xA7, 0x28, 0xA5, 0x00, 0x37, 0xAE, 0x69, 0xEB,
                0xD7, 0xCC, 0xA1, 0x0B, 0x1C, 0x73, 0xDA, 0x8A, 0xC3, 0xC2, 0x87, 0xD2,
                0x70, 0x4B, 0xF3, 0x25
            };

            KeyUtilities.DeriveSeedEncryptionKeyAndIv(destination, a2, a3);

            ReadOnlySpan<byte> a1Expected = new byte[48] {
                0x43, 0x95, 0x0F, 0x7B, 0x8B, 0x89, 0x6E, 0x30, 0x45, 0x78, 0x24, 0xDC,
                0x8A, 0x59, 0x1E, 0x32, 0x87, 0x72, 0xAB, 0xB8, 0xB3, 0xC1, 0x93, 0x71,
                0x29, 0x64, 0x22, 0x75, 0x61, 0x0A, 0x4A, 0x45, 0x32, 0x68, 0x7F, 0x19,
                0xC0, 0x2C, 0xA9, 0xEF, 0x36, 0x13, 0x88, 0x94, 0x35, 0x60, 0x91, 0x8C
            };
            Assert.That(a1Expected.SequenceEqual(destination));
        }

        [Test]
        public void DeriveChallengeEncryptionKeyTest()
        {
            Span<byte> input = new byte[24];
            input.Fill(0xDD);
            Span<byte> output = new byte[16];

            KeyUtilities.DeriveChallengeEncryptionKey(output, input);

            ReadOnlySpan<byte> expectedKey = new byte[16]
            {
                0x4E, 0x00, 0x10, 0x16, 0xDB, 0x62, 0x5D, 0xCC, 0xE9, 0x10, 0x5B, 0xDC,
                0xD8, 0xA1, 0xB4, 0x2C
            };
            Assert.That(expectedKey.SequenceEqual(output));
        }

        [Test]
        [TestCase(
            new byte[64]
            {
                0xEC, 0xA6, 0xD7, 0x99, 0xDD, 0xF0, 0x3E, 0xAA, 0xDD, 0x16, 0xB5, 0xD7,
                0x24, 0x53, 0x31, 0xE4, 0x26, 0xC9, 0xE6, 0xBA, 0x89, 0x97, 0x87, 0x7A,
                0x73, 0x94, 0xF3, 0x28, 0x65, 0x32, 0xA6, 0xB0, 0x53, 0xE4, 0x22, 0x98,
                0x18, 0x08, 0x52, 0x23, 0x43, 0x24, 0x83, 0xFB, 0xA4, 0xD5, 0xC4, 0x3B,
                0xD6, 0xC3, 0x54, 0xC1, 0x0F, 0xEB, 0xC9, 0x03, 0x90, 0x8E, 0xD2, 0x71,
                0x69, 0x7F, 0x39, 0xE9
            },
            new byte[8]
            {
                0x84, 0xD2, 0x48, 0x5F, 0x01, 0x6B, 0x9B, 0x5A
            })]
        [TestCase(
            new byte[24] 
            {
                0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
            },
            new byte[8]
            {
                0x06, 0xDD, 0xCE, 0xE4, 0xAD, 0xAE, 0xC7, 0x7A
            })]
        [TestCase(
            new byte[24] 
            {
                0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
                0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
            },
            new byte[8]
            {
                0x06, 0xD0, 0xEF, 0x4B, 0x10, 0x62, 0x68, 0x22
            })]
        public void DeriveKeyIdTest(byte[] key, byte[] expectedKeyId)
        {
            var keyId = new byte[8];

            key.DeriveKeyId(keyId);

            Assert.That(keyId, Is.EqualTo(expectedKeyId));
        }

        [Test]
        [TestCase(
            // challenge
            new byte[20] { 184, 13, 177, 179, 217, 72, 76, 110, 66, 64, 64, 63, 99, 198, 181, 1, 44, 197, 46, 127 },
            // key1
            new byte[24] { 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD },
            // expected
            new byte[24] { 0xa2, 0x33, 0x87, 0x5e, 0x3c, 0x7f, 0xc0, 0x59, 0xc0, 0x16, 0x12, 0x8d,
                           0xe5, 0x90, 0xab, 0x3c, 0x28, 0xbc, 0x04, 0xc2, 0x77, 0xfa, 0x7c, 0x51 }
            )]
        [TestCase(
            new byte[20] {
                0x07, 0xD5, 0x3C, 0x9F, 0x8F, 0x4F, 0xAA, 0x90, 0x08, 0x4F, 0xC8, 0xB0,
                0xF0, 0x6A, 0x46, 0x59, 0x1C, 0x29, 0x65, 0x84
            },
            new byte[24] { 
                0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
                0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 
            },
            new byte[24] {
                0x13, 0xAE, 0x7A, 0xC7, 0xA1, 0xB7, 0x89, 0x76, 0x19, 0xBE, 0xE7, 0xC1,
                0x53, 0x77, 0x32, 0xFD, 0xB7, 0x7D, 0xB9, 0x6A, 0x10, 0x62, 0xAD, 0xFC
            })]
        [TestCase(
            new byte[20] {
                0x5B, 0x8A, 0x85, 0xC9, 0x31, 0x66, 0xA9, 0x53, 0x40, 0x4A, 0x1C, 0xCB,
                0x17, 0x81, 0x4C, 0xE9, 0xDC, 0xC7, 0x38, 0x5C
            },
            new byte[24]
            {
                0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
                0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
            },
            new byte[24] {
                0x9F, 0x0D, 0x95, 0x56, 0x9F, 0x9A, 0xF3, 0xCE, 0x1B, 0x20, 0xCF, 0xBE,
                0x4C, 0x0D, 0x56, 0x11, 0xB2, 0xEF, 0x26, 0xD8, 0x01, 0x66, 0x0B, 0xC2
            })]
        public void DeriveSessionKeyTest(byte[] challenge, byte[] key1, byte[] expected)
        {
            Assert.Multiple(() =>
            {
                Assert.That(challenge, Has.Length.EqualTo(20));
                Assert.That(key1, Has.Length.EqualTo(24));
                Assert.That(expected, Has.Length.EqualTo(24));
            });

            var sessionKey = new byte[24];
            KeyUtilities.DeriveSessionKey(sessionKey, key1, challenge);

            Assert.That(sessionKey, Is.EqualTo(expected));
        }
}