using HarpoS7.Utilities.Extensions;

namespace HarpoS7.Utilities.Tests.Extensions;

public class KeyExtensionsTests
{
    [Test]
    [TestCase(
        new byte[64]
        {
            0xEC, 0xA6, 0xD7, 0x99, 0xDD, 0xF0, 0x3E, 0xAA, 0xDD, 0x16, 0xB5, 0xD7,
            0x24, 0x53, 0x31, 0xE4, 0x26, 0xC9, 0xE6, 0xBA, 0x89, 0x97, 0x87, 0x7A,
            0x73, 0x94, 0xF3, 0x28, 0x65, 0x32, 0xA6, 0xB0, 0x53, 0xE4, 0x22, 0x98,
            0x18, 0x08, 0x52, 0x23, 0x43, 0x24, 0x83, 0xFB, 0xA4, 0xD5, 0xC4, 0x3B,
            0xD6, 0xC3, 0x54, 0xC1, 0x0F, 0xEB, 0xC9, 0x03, 0x90, 0x8E, 0xD2, 0x71,
            0x69, 0x7F, 0x39, 0xE9
        },
        new byte[8]
        {
            0x84, 0xD2, 0x48, 0x5F, 0x01, 0x6B, 0x9B, 0x5A
        })]
    [TestCase(
        new byte[24] 
        {
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
        },
        new byte[8]
        {
            0x06, 0xDD, 0xCE, 0xE4, 0xAD, 0xAE, 0xC7, 0x7A
        })]
    [TestCase(
        new byte[24] 
        {
            0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
            0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
        },
        new byte[8]
        {
            0x06, 0xD0, 0xEF, 0x4B, 0x10, 0x62, 0x68, 0x22
        })]
    public void DeriveKeyId(byte[] key, byte[] expectedKeyId)
    {
        var keyId = new byte[8];

        key.DeriveKeyId(keyId);

        Assert.That(keyId, Is.EqualTo(expectedKeyId));
    }
}