using System.Buffers.Binary;

namespace HarpoS7.PoC.Packets;

public class SetMultiVarsRequest
{
    private readonly byte[] _publicKeyIdVlq;
    private readonly byte[] _symmetricKeyIdVlq;
    private readonly byte[] _blobData;

    private static readonly byte[] S71500Data =
    [
        0x03, 0x00, 0x01, 0x86, 0x02, 0xF0, 0x80, 0x72, 0x02, 0x01, 0x77, 0x31,
	    0x00, 0x00, 0x05, 0x42, 0x00, 0x00, 0x00, 0x02, 0x70, 0x00, 0x10, 0x3D,
	    0x34, 0x70, 0x00, 0x10, 0x3D, 0x02, 0x02, 0x8E, 0x26, 0x82, 0x32, 0x01,
	    0x00, 0x17, 0x00, 0x00, 0x07, 0x08, 0x8E, 0x09, 0x00, 0x04, 0x00, 0x8E,
	    0x0A, 0x00, 0x02, 0x00, 0x8E, 0x0B, 0x00, 0x17, 0x00, 0x00, 0x07, 0x21,
	    0x8E, 0x22, 0x00, 0x05, 0x8C, 0x86, 0xEF, 0xB0, 0xC2, 0x9F, 0xA2, 0x96,
	    0x94, 0x8E, 0x23, 0x00, 0x04, 0x10, 0x8E, 0x24, 0x00, 0x04, 0x00, 0x00,
	    0x8E, 0x0C, 0x00, 0x17, 0x00, 0x00, 0x07, 0x21, 0x8E, 0x22, 0x00, 0x05,
	    0x9D, 0xF9, 0x81, 0x85, 0xF1, 0xEC, 0xE2, 0x8C, 0x4E, 0x8E, 0x23, 0x00,
	    0x04, 0x84, 0x80, 0x01, 0x8E, 0x24, 0x00, 0x04, 0x00, 0x00, 0x8E, 0x0D,
	    0x00, 0x14, 0x00, 0x81, 0x34, 0xAD, 0xDE, 0xE1, 0xFE, 0xB4, 0x00, 0x00,
	    0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4E, 0x0C, 0x31,
	    0x3B, 0x5E, 0x08, 0xE4, 0x3B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x94, 0x16, 0xD1, 0x47, 0x08, 0x7B, 0x1B, 0x18, 0x10, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x3C, 0x08, 0xF6, 0xE8, 0xED, 0x43,
	    0xD9, 0xAA, 0xCE, 0x70, 0x5E, 0x86, 0x8D, 0x23, 0xDF, 0x19, 0xB9, 0x07,
	    0x51, 0x97, 0x56, 0x1E, 0xCB, 0x1A, 0xA3, 0xEF, 0x70, 0x7A, 0x7A, 0xCF,
	    0x18, 0xA7, 0xD5, 0x29, 0xFE, 0x21, 0x9D, 0x55, 0xE7, 0x2D, 0x2D, 0x2D,
	    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
	    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25,
	    0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x05, 0xC6, 0x08,
	    0x7C, 0xF7, 0x82, 0xDB, 0xA3, 0x9E, 0x21, 0xBA, 0xFA, 0x8F, 0x31, 0xB3,
	    0x24, 0xBF, 0x58, 0x00, 0x16, 0x4B, 0xBC, 0x3D, 0xDE, 0x0D, 0x15, 0xD6,
	    0x9D, 0xB7, 0x65, 0x46, 0xF4, 0x49, 0x1C, 0xA3, 0x4F, 0xEF, 0x12, 0xF9,
	    0x59, 0xEC, 0x90, 0x0F, 0x00, 0x5F, 0x36, 0xDD, 0x38, 0x90, 0x40, 0x76,
	    0x1E, 0xF2, 0xB8, 0x56, 0xD6, 0x00, 0x02, 0x00, 0x17, 0x00, 0x00, 0x01,
	    0x3A, 0x82, 0x3B, 0x00, 0x04, 0x84, 0x00, 0x82, 0x3C, 0x00, 0x04, 0x84,
	    0x00, 0x82, 0x3D, 0x00, 0x04, 0x84, 0x81, 0x82, 0x40, 0x82, 0x3E, 0x00,
	    0x04, 0x84, 0x81, 0x82, 0x40, 0x82, 0x3F, 0x00, 0x15, 0x00, 0x82, 0x40,
	    0x00, 0x15, 0x00, 0x82, 0x41, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
	    0x00, 0x04, 0xE8, 0x89, 0x69, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x89,
	    0x6A, 0x00, 0x13, 0x00, 0x89, 0x6B, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x72, 0x02, 0x00, 0x00
    ];

    private static readonly byte[] S71200Data =
    [
        0x03, 0x00, 0x01, 0x8C, 0x02, 0xF0, 0x80, 0x72, 0x02, 0x01, 0x7D, 0x31,
	    0x00, 0x00, 0x05, 0x42, 0x00, 0x00, 0x00, 0x02, 0x70, 0x40, 0x00, 0x00,
	    0x34, 0x70, 0x40, 0x00, 0x00, 0x02, 0x02, 0x8E, 0x26, 0x82, 0x32, 0x01,
	    0x00, 0x17, 0x00, 0x00, 0x07, 0x08, 0x8E, 0x09, 0x00, 0x04, 0x00, 0x8E,
	    0x0A, 0x00, 0x02, 0x00, 0x8E, 0x0B, 0x00, 0x17, 0x00, 0x00, 0x07, 0x21,
	    0x8E, 0x22, 0x00, 0x05, 0xDE, 0xD0, 0xCD, 0xB0, 0xC8, 0xFC, 0x90, 0xF3,
	    0x1A, 0x8E, 0x23, 0x00, 0x04, 0x82, 0x10, 0x8E, 0x24, 0x00, 0x04, 0x00,
	    0x00, 0x8E, 0x0C, 0x00, 0x17, 0x00, 0x00, 0x07, 0x21, 0x8E, 0x22, 0x00,
	    0x05, 0x9D, 0xF9, 0x81, 0x85, 0xF1, 0xEC, 0xE2, 0x8C, 0x4E, 0x8E, 0x23,
	    0x00, 0x04, 0x84, 0x82, 0x01, 0x8E, 0x24, 0x00, 0x04, 0x00, 0x00, 0x8E,
	    0x0D, 0x00, 0x14, 0x00, 0x81, 0x34, 0xAD, 0xDE, 0xE1, 0xFE, 0xB4, 0x00,
	    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4E, 0x0C,
	    0x31, 0x3B, 0x5E, 0x08, 0xE4, 0x3B, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x1A, 0x73, 0x08, 0x1F, 0x09, 0x6B, 0x42, 0xBD, 0x10, 0x01,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x53, 0x13, 0xAE, 0xC9, 0x68,
	    0x10, 0xCC, 0xFE, 0x31, 0x73, 0xF7, 0x7A, 0x55, 0x54, 0x0D, 0xEF, 0x55,
	    0x8E, 0x51, 0x97, 0x56, 0x1E, 0xCB, 0x1A, 0xA3, 0xEF, 0x70, 0x7A, 0x7A,
	    0xCF, 0x18, 0xA7, 0xD5, 0x29, 0xFE, 0x21, 0x9D, 0x55, 0xE7, 0x2D, 0x2D,
	    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
	    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25,
	    0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0xDB, 0x8B,
	    0x8F, 0xA7, 0xAA, 0xDE, 0x21, 0x12, 0x29, 0x12, 0x9D, 0x75, 0xF2, 0x96,
	    0x43, 0xA2, 0xBF, 0x58, 0x00, 0x16, 0x4B, 0xBC, 0x3D, 0xDE, 0x0D, 0x15,
	    0xD6, 0x9D, 0xB7, 0x65, 0x46, 0xF4, 0x49, 0x1C, 0xA3, 0x4F, 0xEF, 0x12,
	    0xF9, 0x59, 0x3F, 0x21, 0x13, 0xB1, 0x69, 0xB4, 0xFF, 0x91, 0x55, 0xA9,
	    0xD1, 0x0D, 0xDD, 0xE2, 0xDD, 0xA2, 0x00, 0x02, 0x00, 0x17, 0x00, 0x00,
	    0x01, 0x3A, 0x82, 0x3B, 0x00, 0x04, 0x84, 0x00, 0x82, 0x3C, 0x00, 0x04,
	    0x84, 0x00, 0x82, 0x3D, 0x00, 0x04, 0x84, 0x80, 0xC2, 0x40, 0x82, 0x3E,
	    0x00, 0x04, 0x84, 0x80, 0xC2, 0x40, 0x82, 0x3F, 0x00, 0x15, 0x00, 0x82,
	    0x40, 0x00, 0x15, 0x05, 0x32, 0x3B, 0x38, 0x33, 0x34, 0x82, 0x41, 0x00,
	    0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x04, 0xE8, 0x89, 0x69, 0x00,
	    0x12, 0x00, 0x00, 0x00, 0x00, 0x89, 0x6A, 0x00, 0x13, 0x00, 0x89, 0x6B,
	    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x02, 0x00, 0x00
    ];

    private static readonly byte[] PlcSimData =
    [
        0x03, 0x00, 0x01, 0xB1, 0x02, 0xF0, 0x80, 0x72, 0x02, 0x01, 0xA2, 0x31,
	    0x00, 0x00, 0x05, 0x42, 0x00, 0x00, 0x00, 0x02, 0x70, 0x40, 0x00, 0x00,
	    0x34, 0x70, 0x40, 0x00, 0x00, 0x03, 0x03, 0x8E, 0x26, 0x82, 0x32, 0x82,
	    0x2B, 0x01, 0x00, 0x17, 0x00, 0x00, 0x07, 0x08, 0x8E, 0x09, 0x00, 0x04,
	    0x00, 0x8E, 0x0A, 0x00, 0x02, 0x00, 0x8E, 0x0B, 0x00, 0x17, 0x00, 0x00,
	    0x07, 0x21, 0x8E, 0x22, 0x00, 0x05, 0xAD, 0xA6, 0xED, 0xB0, 0x8A, 0xFD,
	    0x91, 0xD2, 0x84, 0x8E, 0x23, 0x00, 0x04, 0x86, 0x10, 0x8E, 0x24, 0x00,
	    0x04, 0x00, 0x00, 0x8E, 0x0C, 0x00, 0x17, 0x00, 0x00, 0x07, 0x21, 0x8E,
	    0x22, 0x00, 0x05, 0xC0, 0xF6, 0xA2, 0xAF, 0xDC, 0xC9, 0xBC, 0xBB, 0xBE,
	    0x8E, 0x23, 0x00, 0x04, 0x84, 0x86, 0x01, 0x8E, 0x24, 0x00, 0x04, 0x00,
	    0x00, 0x8E, 0x0D, 0x00, 0x14, 0x00, 0x81, 0x58, 0xAD, 0xDE, 0xE1, 0xFE,
	    0xD8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	    0xBE, 0x3B, 0x5E, 0x92, 0xFB, 0x12, 0xD9, 0x81, 0x01, 0x03, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x84, 0xD2, 0x48, 0x5F, 0x01, 0x6B, 0x9B, 0x5A,
	    0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0xE7, 0x29, 0xE7,
	    0x42, 0x0D, 0x09, 0x14, 0xF3, 0x2F, 0x62, 0x49, 0x35, 0x79, 0x2B, 0xBC,
	    0x5D, 0xAB, 0xDB, 0x36, 0x98, 0x91, 0xE8, 0x93, 0xB0, 0x4E, 0x2A, 0x84,
	    0x74, 0xB5, 0x98, 0xD8, 0xC2, 0xBF, 0x2F, 0x5C, 0x85, 0x2F, 0x8B, 0xAC,
	    0x94, 0x07, 0x7F, 0xE9, 0xC5, 0xFF, 0x40, 0x8F, 0x2C, 0x98, 0xFD, 0x39,
	    0xBF, 0x30, 0x28, 0xFB, 0x01, 0xAE, 0x40, 0x26, 0x9B, 0x69, 0xE8, 0xE4,
	    0xA5, 0x2D, 0x6C, 0x32, 0x88, 0x5F, 0x15, 0x05, 0x64, 0x15, 0x10, 0x64,
	    0xF6, 0xE5, 0x6D, 0x24, 0x94, 0x14, 0xBC, 0xFD, 0xE8, 0x65, 0x46, 0x9E,
	    0x15, 0x56, 0x08, 0xFB, 0x01, 0x93, 0x5A, 0x7D, 0xD5, 0xA9, 0xCA, 0xD1,
	    0xEF, 0x90, 0x8F, 0x92, 0x26, 0xAB, 0x47, 0xED, 0x42, 0x6F, 0x86, 0xE2,
	    0x1F, 0x05, 0x88, 0x7D, 0xDB, 0xBF, 0x6A, 0xC7, 0x0C, 0x08, 0x62, 0x53,
	    0xFB, 0xA6, 0xAC, 0xE3, 0x1D, 0x12, 0x7F, 0x27, 0x28, 0xF1, 0x4B, 0xAF,
	    0x1A, 0x86, 0x62, 0x7D, 0xD0, 0x96, 0x03, 0x01, 0x1A, 0x6B, 0xDF, 0xE8,
	    0x44, 0xC6, 0xA6, 0xD8, 0x09, 0x45, 0xA3, 0x86, 0x46, 0xCF, 0xB1, 0x81,
	    0x1E, 0xF6, 0x14, 0x7F, 0x46, 0xEA, 0x10, 0xFB, 0x00, 0x02, 0x00, 0x17,
	    0x00, 0x00, 0x01, 0x3A, 0x82, 0x3B, 0x00, 0x04, 0x85, 0x40, 0x82, 0x3C,
	    0x00, 0x04, 0x85, 0x00, 0x82, 0x3D, 0x00, 0x04, 0x84, 0x80, 0xC1, 0x00,
	    0x82, 0x3E, 0x00, 0x04, 0x84, 0x80, 0xC1, 0x00, 0x82, 0x3F, 0x00, 0x15,
	    0x00, 0x82, 0x40, 0x00, 0x15, 0x00, 0x82, 0x41, 0x00, 0x03, 0x00, 0x03,
	    0x00, 0x03, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x04, 0xE8, 0x89, 0x69,
	    0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x89, 0x6A, 0x00, 0x13, 0x00, 0x89,
	    0x6B, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x02, 0x00,
	    0x00
    ];

    public SetMultiVarsRequest(
        ReadOnlySpan<byte> publicKeyId, 
        ReadOnlySpan<byte> symmetricKeyId, 
        ReadOnlySpan<byte> blobData)
    {
        var pubKeyIdUlong = BinaryPrimitives.ReadUInt64LittleEndian(publicKeyId);
        var symmetricKeyIdUlong = BinaryPrimitives.ReadUInt64LittleEndian(symmetricKeyId);

        Span<byte> publicKeyIdVlq = stackalloc byte[9];
        Span<byte> symKeyIdVlq = stackalloc byte[9];
        var pubLength = pubKeyIdUlong.EncodeAsVlq(publicKeyIdVlq);
        var symLength = symmetricKeyIdUlong.EncodeAsVlq(symKeyIdVlq);
        
        _publicKeyIdVlq = publicKeyIdVlq[..pubLength].ToArray();
        _symmetricKeyIdVlq = symKeyIdVlq[..symLength].ToArray();
        _blobData = blobData.ToArray();
    }
    
    public void WriteS71500(Stream stream)
    {
        const int publicKeyIdOffset = 0x40;
        const int symmetricKeyIdOffset = 0x60;
        const int encryptedKeyBlobOffset = 0x7D;

        Span<byte> data = stackalloc byte[S71500Data.Length];
        S71500Data.CopyTo(data);
        
        _publicKeyIdVlq.CopyTo(data[publicKeyIdOffset..]);
        _symmetricKeyIdVlq.CopyTo(data[symmetricKeyIdOffset..]);
        _blobData.CopyTo(data[encryptedKeyBlobOffset..]);
        
        stream.Write(data);
    }
    
    public void WriteS71200(Stream stream)
    {
        const int publicKeyIdOffset = 0x40;
        const int symmetricKeyIdOffset = 0x61;
        const int encryptedKeyBlobOffset = 0x7E;

        Span<byte> data = stackalloc byte[S71200Data.Length];
        S71200Data.CopyTo(data);
        
        _publicKeyIdVlq.CopyTo(data[publicKeyIdOffset..]);
        _symmetricKeyIdVlq.CopyTo(data[symmetricKeyIdOffset..]);
        _blobData.CopyTo(data[encryptedKeyBlobOffset..]);
        
        stream.Write(data);
    }
    
    public void WritePlcSim(Stream stream)
    {
        const int publicKeyIdOffset = 0x42;
        const int symmetricKeyIdOffset = publicKeyIdOffset + 33;
        const int encryptedKeyBlobOffset = 0x80;

        Span<byte> data = stackalloc byte[PlcSimData.Length];
        PlcSimData.CopyTo(data);
        
        _publicKeyIdVlq.CopyTo(data[publicKeyIdOffset..]);
        _symmetricKeyIdVlq.CopyTo(data[symmetricKeyIdOffset..]);
        _blobData.CopyTo(data[encryptedKeyBlobOffset..]);
        
        stream.Write(data);
    }
}