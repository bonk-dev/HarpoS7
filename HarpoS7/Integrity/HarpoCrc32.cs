using System.Text;

namespace HarpoS7.Integrity;

/// <summary>
/// Provides an implementation of the CRC-32 algorithm, as used in all of the Siemens apps.
/// <para>The polynomial for the CRC: 0xF4ACFB13</para>
/// <para>CRC is used for example to identify field paths in S7CommPlus communication. For example in TIA Portal V16 it is
/// generated when you change a used field in a datablock (unused fields do not get a CRC).</para>
/// </summary>
public class HarpoCrc32
{
    // poly: 0xF4ACFB13
    private static readonly uint[] CrcTable = new uint[256]
    {
        0U, 4104977171U, 502598965U, 3914987046U, 1005197930U, 3477528953U, 639571807U, 3535006796U, 2010395860U,
        2205732807U,
        1780562401U, 2660090610U, 1279143614U, 3096630701U, 1372267403U, 2775046296U, 4020791720U, 453284539U,
        4066206877U, 116498318U,
        3561124802U, 552503505U, 3384246007U, 1025213924U, 2558287228U, 1825613423U, 2240368713U, 1898294106U,
        2744534806U, 1463467013U,
        3194178083U, 1255125296U, 737945667U, 3746616144U, 906569078U, 3265650277U, 269890089U, 3837446458U, 232996636U,
        4182754319U,
        1546132631U, 2827282308U, 1105007010U, 3044141745U, 1740769021U, 2473524718U, 2050427848U, 2392584411U,
        3293856235U, 821607160U,
        3651226846U, 755873741U, 4290665345U, 185770130U, 3796588212U, 384282023U, 3011540287U, 1194102316U,
        2926934026U, 1524204313U,
        2288676693U, 2093388870U, 2510250592U, 1630771571U, 1475891334U, 2740235157U, 1242389939U, 3198264992U,
        1813138156U, 2562634239U,
        1910982617U, 2236333258U, 539780178U, 3565199169U, 1037658471U, 3379925620U, 465993272U, 4016735531U,
        104035085U, 4070541342U,
        3092265262U, 1291633213U, 2779067419U, 1359597320U, 2210014020U, 1997985879U, 2655989361U, 1793316194U,
        3481538042U, 992540393U,
        3530621135U, 652082140U, 4100855696U, 12774531U, 3919256229U, 490201526U, 2080667845U, 2292745174U, 1643214320U,
        2505936611U,
        1206805167U, 3007486396U, 1511747482U, 2931266697U, 198200337U, 4286363394U, 371540260U, 3800676919U,
        809129595U, 3298209128U,
        768564046U, 3647184989U, 2477527405U, 1728113278U, 2388204632U, 2062935883U, 2823162631U, 1558900756U,
        3048408626U, 1092615457U,
        3833079225U, 282386090U, 4186777740U, 220320671U, 3750903763U, 725533888U, 3261543142U, 919325173U, 2951782668U,
        1532779039U,
        2986716217U, 1185503018U, 2484779878U, 1622556789U, 2314188371U, 2101562688U, 3626276312U, 747138763U,
        3318847725U, 830301182U,
        3821965234U, 392328353U, 4265312903U, 177699220U, 1079560356U, 3035902903U, 1571669393U, 2835431042U,
        2075316942U, 2401118685U,
        1715986427U, 2464883944U, 931986544U, 3273656163U, 712634693U, 3738503766U, 208070170U, 4173995273U, 294906671U,
        3846115388U,
        2215414095U, 1889563228U, 2583266426U, 1834319721U, 3219559205U, 1263167542U, 2719194640U, 1455383811U,
        4091067803U, 125060744U,
        3995971758U, 444681149U, 3358762993U, 1017011426U, 3586632388U, 560681431U, 1805967591U, 2668108788U,
        1985080786U, 2197624513U,
        1347353229U, 2766274974U, 1304164280U, 3105295531U, 477156403U, 3906744096U, 25549062U, 4113113621U, 664456793U,
        3543545162U,
        980403052U, 3468900479U, 4161335690U, 212077209U, 3858627775U, 290523052U, 3286428640U, 927863027U, 3726108373U,
        716905926U,
        2413610334U, 2070953549U, 2452211819U, 1720005496U, 3023494964U, 1083843623U, 2848182785U, 1567566098U,
        396400674U, 3809239857U,
        173380887U, 4277759492U, 743080520U, 3638983003U, 834637693U, 3306386542U, 1618259190U, 2497206245U,
        2105647555U, 2301450960U,
        1537128092U, 2939309455U, 1181465513U, 2999402682U, 3556039113U, 660087514U, 3456226556U, 984428527U,
        3894330275U, 481441968U,
        4125871766U, 21443973U, 2753621277U, 1351357966U, 3117801512U, 1299782459U, 2680878967U, 1801849956U,
        2185230914U, 1989345617U,
        1012707425U, 3371191154U, 564772180U, 3573892679U, 129411595U, 4078588184U, 440641342U, 4008664109U,
        1267238069U, 3206840230U,
        1451067776U, 2731635347U, 1885511391U, 2228118988U, 1838650346U, 2570807545U
    };

    public uint Result { get; private set; }

    public void Update(string value)
    {
        Span<byte> buffer = stackalloc byte[Encoding.UTF8.GetByteCount(value)];
        Encoding.UTF8.GetBytes(value, buffer);

        Update(buffer);
        
    }

    public void UpdateWith(uint value)
    {
        UpdateWith((byte)value);
        UpdateWith((byte)(value >> 8));
        UpdateWith((byte)(value >> 16));
        UpdateWith((byte)(value >> 24));
    }

    public void Update(ReadOnlySpan<byte> bytes)
    {
        for (int i = 0; i < bytes.Length; ++i)
        {
            UpdateWith(bytes[i]);
        }
    }

    public void UpdateWith(byte @byte) =>
        Result = CrcTable[@byte ^ Result >> 24] ^ (Result << 8);

    public void Reset() =>
        Result = 0U;
}